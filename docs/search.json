[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC/SCI 230: Data Science 1",
    "section": "",
    "text": "Instructor: Kayla Blincow, PhD (aka Kayla Israel)\n\n\nWelcome!\nThis website houses all of the coding exercises and assignments for CSC/SCI 230 Data Science 1. All other course documentation can be found on Brightspace.\n\n\nSchedule\n\n\n\nWeek\nDates\nMaterials\n\n\n\n\n1\n8/19 - 8/23\nHomework 1\n\n\n2\n8/26 - 8/30\nHomework 2\n\n\n3\n9/3 - 9/6\nHomework 3\n\n\n4\n9/9 - 9/13\nHomework 4\n\n\n5\n9/16 - 9/20\nHomework 5\n\n\n6\n9/23 - 9/27\nHomework 6\n\n\n7\n9/30 - 10/4\nHomework 7\n\n\n8\n10/7 - 10/11\nHomework 8\n\n\n9\n10/14 - 10/18\nHomework 9\n\n\n10\n10/21 - 10/25\nHomework 10\n\n\n11\n10/28 - 10/31\nHomework 11\n\n\n12\n11/4 - 11/8\nHomework 12\n\n\n13\n11/12 - 11/15\nHomework 13\n\n\n14\n11/18 - 11/22\nHomework 14\n\n\n15\n11/25 - 11/26\nHomework 15\n\n\nURISE DS Wksp Day 1\n8/28\nDS Wksp Tutorial 1\n\n\nURISE DS Wksp Day 2\n9/4\nDS Wksp Tutorial 2\n\n\nURISE DS Wksp Day 3\n9/8\nDS Wksp Tutorial 3"
  },
  {
    "objectID": "Week3HW.html",
    "href": "Week3HW.html",
    "title": "Week 3: Data Visualization Part 1",
    "section": "",
    "text": "In this tutorial, we will introduce some reasons why data visualization is a critical aspect of data science and demonstrate the basics of creating effective data visualizations in R using ggplot2.\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. For example, ggplot2 is a package with functions that give us a lot of flexibility in creating data visualizations.\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(dplyr) #package with useful data manipulation functions\nlibrary(ggplot2) #package allowing us to make plots\nlibrary(palmerpenguins) #package containing our data"
  },
  {
    "objectID": "Week1R4DS.html",
    "href": "Week1R4DS.html",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "In this course, you will not have to download R or RStudio, which are software tools used to implement the R coding language. Since our focus is not for you to become expert coders, but rather to expose you to the data science work flow, we are going to do all your coding in interactive tutorials like this one.\nFor this first experience, I just want you to get used to the format. This tutorial directly mirrors the R for Data Science textbook “Whole Game &gt; 2 Workflow:basics” chapter that you were assigned to read this week. As you’re reading, use this page to run the code that appears in the chapter.\nA couple vocabulary words:\n\ncode chunk: these are sections in your tutorials that contain code that is for you to view and investigate, but not necessarily run\nWebR code chunk: these are sections in your tutorials that contain an interactive code chunk that allows you to edit and run the code in the section\n\n\n\nThese are examples of code chunks:\n\n1/200 * 30\n\n[1] 0.15\n\n(59 + 73 + 2) / 3\n\n[1] 44.66667\n\nsin(pi / 2)\n\n[1] 1\n\n\nNotice the output of the code is printed below the chunk, and you are not able to edit the chunk.\nHere is an example of a WebR code chunk:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this type of code chunk, you can click in the chunk and edit what is written there. You might have noticed, nothing gets printed when you click “Run Code”. Try writing “x” on the next line and running the code to see what happens.\nLet’s try another example. In the code chunk below, add the code from the text that demonstrates basic arithmetic on vectors. Click “Run Code” and see if you get the same result.\nFYI: vectors are a type of data structure that holds elements of the same type–the primes object we create below is a vector of numeric values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry adding a comment in the WebR code chunk below and running it to see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCan you edit the names of the objects and add comments below to make the code more effective?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry exploring the sample() function in the WebR code chunk below.\nPro-tip: if you want to find out more about how to use a function you can type “?” in front of it to view the help information associated with it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry the exercises from the text below. When you have completed them share a screenshot of your outputs for each question to get full points on your homework assignment for this week.\n\nWhy does this code not work?\nEdit the code so that it runs properly and provide a written response to the question as a comment in the WebR code chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTweak each of the following R commands so that they run correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe will skip this one since it’s specific to RStudio.\nLook at the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nWrite your response as a comment in the WebR code chunk.\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n  geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#coding-basics",
    "href": "Week1R4DS.html#coding-basics",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "These are examples of code chunks:\n\n1/200 * 30\n\n[1] 0.15\n\n(59 + 73 + 2) / 3\n\n[1] 44.66667\n\nsin(pi / 2)\n\n[1] 1\n\n\nNotice the output of the code is printed below the chunk, and you are not able to edit the chunk.\nHere is an example of a WebR code chunk:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this type of code chunk, you can click in the chunk and edit what is written there. You might have noticed, nothing gets printed when you click “Run Code”. Try writing “x” on the next line and running the code to see what happens.\nLet’s try another example. In the code chunk below, add the code from the text that demonstrates basic arithmetic on vectors. Click “Run Code” and see if you get the same result.\nFYI: vectors are a type of data structure that holds elements of the same type–the primes object we create below is a vector of numeric values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#comments",
    "href": "Week1R4DS.html#comments",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try adding a comment in the WebR code chunk below and running it to see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#whats-in-a-name",
    "href": "Week1R4DS.html#whats-in-a-name",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Can you edit the names of the objects and add comments below to make the code more effective?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#calling-functions",
    "href": "Week1R4DS.html#calling-functions",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try exploring the sample() function in the WebR code chunk below.\nPro-tip: if you want to find out more about how to use a function you can type “?” in front of it to view the help information associated with it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#exercises",
    "href": "Week1R4DS.html#exercises",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try the exercises from the text below. When you have completed them share a screenshot of your outputs for each question to get full points on your homework assignment for this week.\n\nWhy does this code not work?\nEdit the code so that it runs properly and provide a written response to the question as a comment in the WebR code chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTweak each of the following R commands so that they run correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe will skip this one since it’s specific to RStudio.\nLook at the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nWrite your response as a comment in the WebR code chunk.\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n  geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Course Description\nDATA SCIENCE I. Data Science I provides students with an introduction to the concepts and basic skills needed to understand the role of data in today’s world. The course explores the emergence of the field using the data science workflow as the unifying framework to illustrate the importance of each stage of the workflow, how it contributes to the final report, and how that new information is used. Topics include applications of data science; data ethics; data preparation; data stewardship; analysis, evaluation, communicating results, and best practices. The trade-offs among tools, algorithms, and visualizations are discussed using both effective and ineffective examples. This is a hands-on course, students work with datasets in a peer-peer and near-peer groups.\nPrerequisites: MAT 140 or MAT 143.\n\nContact\nKayla Blincow: kayla.israel@uvi.edu"
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "Week2HW.html",
    "href": "Week2HW.html",
    "title": "Week 2 Homework: Asking Questions",
    "section": "",
    "text": "To receive full points on this homework, please submit a document containing all of the requested screenshots on Brightspace. You should also make sure to run all the code chunks in this document for the tutorial to run properly."
  },
  {
    "objectID": "Week4HW.html",
    "href": "Week4HW.html",
    "title": "Week 4: Global Plastic Waste",
    "section": "",
    "text": "This tutorial is a modified version Data Science in Box’s Lab 02 - Global plastic waste found here. All material and concepts should be attributed to the Data Science in a Box initiative."
  },
  {
    "objectID": "Week2HW.html#getting-started",
    "href": "Week2HW.html#getting-started",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Getting started",
    "text": "Getting started\nFirst things first, we load our data set and take a look at it. I am only going to show you some of the ways you can explore this data set, then provide you with a written summary. In reality, you would spend a lot of time taking a look at each column and familiarizing yourself with what the data entail.\nMAKE SURE TO RUN ALL CODE CHUNKS.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: the lubridate package (an R add-on) has this data set pre-loaded in it, which is why the above code works. We are using the assignment arrow “&lt;-” to create an object “lakers” that is the lubridate lakers data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: It’s a good idea to make note of what form the data takes in each column. In this case, all columns are character strings  or integers . This is important because we might not want them to take that form. For example, the “date” column is currently an integer, but if we were to work with it, we might want it to be recognized as an actual date. We will spend more time working on dealing with issues like this later in the semester.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: the “$” operator allows us to select a column within a dataframe. In the above code chunk, we used the unique() function on the etype column by typing lakers$etype. The line of code says look in the lakers dataframe for the etype column and give us a list of the unique values present in that column.\nWe see that our data includes game logs from the entire season with the following variables (variables we will be actively using in this tutorial are bolded):\n\ndate: Date of the game\nopponent: Three letter code for the opponent team the Lakers played against\ngame_type: Whether the game was home or away\ntime: The time on the game clock when the play was recorded (i.e. time left in the quarter)\nperiod: Quarter of the game (1, 2, 3, 4, 5), with 5 representing overtime\netype: Type of play recorded\nteam: The team that made the play\nplayer: The player that made the play\nresult: The result of the play - blank for non-shots, “missed” or “made” for shots\npoints: Number of points the play resulted in\ntype: Type of play - type of foul for fouls, type of shot for shots, type of rebound for rebounds\nx: The location along the x plane (court width) of the play (shots only)\ny: The location along the y plane (court length) of the play (shots only)"
  },
  {
    "objectID": "Week2HW.html#question-1-who-was-making-bonehead-plays",
    "href": "Week2HW.html#question-1-who-was-making-bonehead-plays",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 1: Who was making bonehead plays?",
    "text": "Question 1: Who was making bonehead plays?\nFor this first question, I will walk you through how to find the answer, showing you some important data wrangling tools along the way.\n\nWhich players committed the most turnovers and missed the most lay-ups and free throws combined?\n\nTo answer the provided questions, we first need to do some data filtering. We are only interested in plays made by the Lakers, so we need to filter the data to only include “LAL” observations in the “team” column.\n\n#filter the data so we only have plays made by the Lakers\nlakersQ1 &lt;- lakers %&gt;%  #that weird symbol is called a pipe, you can imagine it means \"and then\"\n  filter(team == \"LAL\") #NOTE: this is the dplyr package filter, not the base R filter\n\n#check to see if that worked\nunique(lakersQ1$team) #should only print \"LAL\"\n\n[1] \"LAL\"\n\n\nIn the above code chunk I introduced a new coding operator, the pipe, denoted by “%&gt;%” or “|&gt;”. You can imagine this translating to “and then”. We are creating a new object called lakersQ1. To create this object we take the lakers data “and then” we filter it so that the “team” column only includes “LAL”. We use == when filtering character strings, and = when filtering numeric or integer values.\nNow that we have done that, we need to determine which players committed the most turnovers and missed the most lay-ups and free throws. We can again accomplish this using filtering.\n\n#for simplicity's sake and to get the feel for pipes, we will split this up\nlakersQ1 &lt;- lakersQ1 %&gt;% #NOTE: we are overwriting our original lakersQ1 object when we assign this code to an object of the same name\n  filter(etype == \"turnover\" | etype == \"free throw\"| etype == \"shot\") %&gt;% #filter so we only have turnovers, free throws, and shots represented\n  filter(result != \"made\") %&gt;% #remove all made shots\n  filter(grepl(\"layup\", type) | type == \"\") #grepl allows us to filter for rows holding a specific phrase (e.g. \"layup\")\n\nhead(lakersQ1)\n\n      date opponent game_type  time period    etype team              player\n1 20081028      POR      home 11:25      1     shot  LAL        Derek Fisher\n2 20081028      POR      home 08:15      1 turnover  LAL         Kobe Bryant\n3 20081028      POR      home 05:24      1     shot  LAL        Derek Fisher\n4 20081028      POR      home 04:40      1     shot  LAL         Kobe Bryant\n5 20081028      POR      home 03:21      1 turnover  LAL Vladimir Radmanovic\n6 20081028      POR      home 02:52      1 turnover  LAL          Lamar Odom\n  result points          type  x  y\n1 missed      0         layup 25  6\n2             0               NA NA\n3 missed      0 driving layup 25  6\n4 missed      0         layup 25  6\n5             0               NA NA\n6             0               NA NA\n\n\nIn the above code chunk, we used the pipe to do a series of filter() actions to end up with only observations that included turnovers, missed free throws, and missed layups. A couple new things we introduced:\n\nthe “|” operator stands for “or”, e.g. the second line says filter the etype column so the values equal “turnover” OR “free throw” OR “shot”\nthe “!=” stands for “does not equal”, e.g. the third line says filter the result column so the values are anything that does not equal “made”, leaving us with rows in the column that have “missed” or are blank\ngrepl() is a function that allows us to identify a specific character string in our filtering, e.g. the fourth line says filter for rows where the character string “layup” appears OR the row is blank\n\nNow we can identify which players appear most frequently in this filtered dataset.\n\nlakersQ1 %&gt;% group_by(player) %&gt;% \n  summarize()\n\n# A tibble: 18 × 1\n   player               \n   &lt;chr&gt;                \n 1 \"\"                   \n 2 \"Adam Morrison\"      \n 3 \"Andrew Bynum\"       \n 4 \"Chris Mihm\"         \n 5 \"D.J. Mbenga\"        \n 6 \"Derek Fisher\"       \n 7 \"Jordan Farmar\"      \n 8 \"Josh Powell\"        \n 9 \"Kobe Bryant\"        \n10 \"Lamar Odom\"         \n11 \"Luke Walton\"        \n12 \"Pau Gasol\"          \n13 \"Sasha Vujacic\"      \n14 \"Shannon Brown\"      \n15 \"Sun Yue\"            \n16 \"Trevor Ariza\"       \n17 \"Vladimir Radmanovic\"\n18 \"Yue Sun\""
  },
  {
    "objectID": "Week2HW.html#question-2-who-contributed-to-low-scoring-quarters",
    "href": "Week2HW.html#question-2-who-contributed-to-low-scoring-quarters",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 2: Who contributed to low scoring quarters?",
    "text": "Question 2: Who contributed to low scoring quarters?\nLet’s move on to the second question.\n\nAcross the full season, which quarter did the Lakers seem to struggle most in terms of points scored at home versus away games? Which players missed the most shots in that quarter in home versus away games?\n\nFirst thing we have to do is identify which quarter was the lowest scoring across the season. We will do this by again filtering so that we only have rows including information on plays by the Lakers.\nAdjust the following code chunk so that you create an object called “lakersQ2” that filters for only plays made by the Lakers. If you get this right, the next two code chunks should run smoothly. (HINT: Look back at how we tackled this task in the first question.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow we are going to calculate the number of points scored each quarter each game, excluding overtime. I’ll write this code for you, just run the following chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above code chunk, I introduce a new, very important combination of functions: group_by() and summarize(). This allows us to group data based on one or more columns, basically creating a category, that we can then calculate summary statistics for. In this case we are identifying indivdual games by grouping by date and opponent and then also grouping by period, to create a unique category for each quarter in each game. We then use summarize() and the sum() functions to calculate the total number of points scored in each quarter in each game. You’ll notice our dataframe is greatly simplified now, only including our grouping columns and the new column, “score”, that we created.\nI will now generate a boxplot summarizing these data. Again, just run this chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "href": "Week2HW.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 3: Who performed highest against the best opposing teams?",
    "text": "Question 3: Who performed highest against the best opposing teams?\nMoving on to our final question!\n\nLast season, the Boston Celtics and the Cleveland Cavaliers had higher W/L percentages than the Lakers. Which players performed the best against these teams in terms of attempted shots? Rebounds? Assists?\n\nWe will again rely on filtering to find the answer.\nFirst, let’s filter so the data only include games played against the Celtics and the Cavs. I’ll do this one for you, just make sure to run the code chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above chunk, I used the “|” operator. When filtering, this symbol, |, means “or”. In the second line of code we are saying we only want observations where the opponent column is “CLE” (for the Cavs) OR “BOS” (for the Celtics). We will learn more about these types of operators later in the semester.\nNow that we have only the games we are interested in, let’s filter so we only have observations of plays made by the Lakers. Fill out the code chunk below to accomplish that task.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s start with who had the most attempted shots?\nUse the code chunk below to filter for shots in the etype column. Call the new object lakersQ3_shots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the code chunk above correctly, the following chunk should generate a plot telling you who took the most shots against the Celtics and Cavs last season.\nTake a screenshot of the resulting plot and include it in your HW response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow let’s do the same thing to see who had the most rebounds.\nUse the code chunk below to filter for rebounds in the etype column from the lakersQ3 object. Call the new object lakersQ3_rbs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the code chunk above correctly, the following chunk should generate a plot telling you who got the most rebounds against the Celtics and Cavs last season.\nTake a screenshot of the resulting plot and include it in your HW response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, can we accomplish the same task for assists?\nUse the code chunk below to filter for assists in the etype column.\n(HINT: you might want to take a look at the available options in the etype column using the unique() function, similar to what we did in the “Getting started” section.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#concluding-remarks",
    "href": "Week2HW.html#concluding-remarks",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Concluding remarks",
    "text": "Concluding remarks\nObviously, I intentionally made this is a very simplified example, as we are just starting to get our feet wet in terms of coding in R, but these types of analyses actually go on behind the scenes for most sports teams.\nBased on our very limited analysis what would your recommendations be to the Lakers coach and manager regarding what to focus on for next season?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are much more complicated questions we could ask and analyses we could perform with these data as well. We stuck with questions directly related to the variables present, but we can also take these data another step using data manipulation and analysis tools. Even though the active court lineup is not provided, we could deduce which players were on the court at certain times and ask something like which lineup led to the most points scored? Or which lineup led to the most missed shots by the other team? We could also try predicting outcomes using these data. What is the probability of the Lakers winning a game given the number of minutes Kobe Bryant plays in the first half? How about given the number of consecutive away games they’ve played?\nWhat is another more complex question you could answer using these data?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs we move through this semester, we will try to build your coding skills so that you can start trying to address these types of more complex data science questions on your own. We might even revisit this data set later in the semester to see if we can implement the tools you’ve learned to ask more complex questions."
  },
  {
    "objectID": "Week2HW.html#question-1-who-committed-the-most-turnovers",
    "href": "Week2HW.html#question-1-who-committed-the-most-turnovers",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 1: Who committed the most turnovers?",
    "text": "Question 1: Who committed the most turnovers?\nFor this first question, I will walk you through how to find the answer, showing you some important data wrangling tools along the way. We will spend A LOT more time exploring these tools in future weeks, so don’t worry too much if you don’t follow all the code.\n\nWhich players committed the most turnovers?\n\nTo answer this, we first need to do some data filtering. We are only interested in plays made by the Lakers, so we need to filter the data to only include “LAL” observations in the “team” column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above code chunk, I introduced a new coding operator, the pipe, denoted by “%&gt;%” or “|&gt;”. You can imagine this translating to “and then”. We are creating a new object called lakersQ1. To create this object we take the lakers data “and then” we filter it so that the “team” column only includes “LAL”. We use == when filtering (not =). NOTE: we are using the dplyr package filter() function, not the base R filter() function.\nNow that we have done that, we need to determine which players committed the most turnovers by keeping only observations associated with turnovers. We can again accomplish this using filtering.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: when we use the assignment arrow (&lt;-) with the same object name as the one we made previously (“lakersQ1”), we are overwriting our original lakersQ1 object and creating a new one.\nNow we can create a visualization to see who committed the most turnovers. Again, we will be spending a lot more time working through how to make visualizations, so don’t worry too much about the code. Focus more on interpreting the output.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see that Kobe Bryant, Pau Gasol, and Lamar Odom committed the most turnovers across the season. Assuming you know nothing about basketball, I will tell you that these are three of the biggest stars on this championship team. This means they probably got waayyyy more playing time than the other players, giving them more opportunity to commit a turnover in the first place. This is an important lesson for multiple reasons:\n\nYou should always evaluate your results to see if they make sense in the context of the bigger picture. Kobe Bryant is one of the greatest NBA players of all time and played with the Lakers his entire 20 year career. If we were using this as a metric for deciding who gets traded, we probably haven’t found a very good metric. But then again, even Kobe has room for improvement… 200 seems like a lot, and he could use this information to focus his efforts on reducing turnovers.\nSometimes folks you are working with think they want the answer to one question (who committed the most turnovers?), but what they really want is the answer to a different question (who committed the most turnovers accounting for how often they played?).\n\nWhat’s something we could do to make this a fairer picture of turnover rates?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#question-2-which-players-missed-the-most-free-throws",
    "href": "Week2HW.html#question-2-which-players-missed-the-most-free-throws",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 2: Which players missed the most free throws?",
    "text": "Question 2: Which players missed the most free throws?\nLet’s move on to the second question.\n\nWhich players missed the most free throws?\n\nFirst thing we have to do is again pull only data related to observations of plays commited by the Lakers (not their opponents).\nAdjust the following code chunk so that you create an object called “lakersQ2” that filters for only plays made by the Lakers. (HINT: Look back at how we tackled this task in the first question.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow we need to filter so we only have data associated with free throws.\nAdjust the following code to accomplish that task. (HINT: Look at how we filtered to only have observations of turnovers in the first question.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFinally, we also need to filter so we are only looking at missed free throws.\nAdjust the code chunk below to do the final filtering so we are looking at data on free throws missed by the Lakers.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the three code chunks above correctly, this following code chunk should generate a bar plot of the number of missed free throws for each player.\nTake a screenshot of the resulting plot and include it in your homework response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhich players missed the most free throws? Is there anything you would change about this question/analysis to get a fairer picture of free throw percentages?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week3HW.html#why-is-data-visualization-important",
    "href": "Week3HW.html#why-is-data-visualization-important",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Why is data visualization important?",
    "text": "Why is data visualization important?\nWhen we consider the data science workflow (Fig. 1), there is not a step that explicitly says “data visualization”. This is because data visualization is so essential that it occurs throughout the entire process!\n\nFigure 1. Data science life cycle. (Drawn by Chanin Nantasenamat in collaboration with Ken Jee; Source Article)\nAt its core, data visualization is used to simplify complex data. Data scientists often work with very large data sets (think millions of rows) and it is exceedingly difficult to conceptualize those data when interacting with them in table form. Using data visualization techniques, data scientists are able to:\n\nidentify (sometimes unexpected) patterns and trends in data\nidentify errors or weirdnesses in data\nestablish expectations for relationships in data to inform understanding of analysis results\ncommunicate the results of their efforts to others\n\nYour first step is ALWAYS to visualize your data!"
  },
  {
    "objectID": "Week3HW.html#data-visualization-in-r",
    "href": "Week3HW.html#data-visualization-in-r",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Data visualization in R",
    "text": "Data visualization in R\nThere are a number of different tools that can aid in visualizing data in the R environment. Below is a selection of some of the tools available.\n\nggplot2: A powerful and flexible plotting package based on the grammar of graphics, allowing for the creation of complex multi-layered plots with consistent syntax.\nbase R: The default plotting system in R, offering simple and straightforward functions for plotting with basic customization options. (I often use base R plots for quick exploratory visualizations).\nplotly: An interactive graphing package that builds on ggplot2, allowing users to create dynamic, web-based interactive visualizations. For example, you can have a plot display a written value when hovering over a data point.\nshiny: A web application framework for R that allows users to create interactive web apps with reactive elements, including dynamic and responsive plots. This is a common tool for creating interactive data dashboards in R.\n\nYou are encouraged to explore these tools and others, but for the purposes of this lab, we will be focusing on ggplot2. You can find additional information on the ggplot2 package here."
  },
  {
    "objectID": "Week3HW.html#our-dataset-palmer-penguins",
    "href": "Week3HW.html#our-dataset-palmer-penguins",
    "title": "Week 3 Homework",
    "section": "",
    "text": "The Palmer Penguins dataset includes morphometric information on three different species of penguins across three different islands in Antarctica monitored by the Palmer Station Long Term Ecological Research study area. These data were made available by Dr. Kristen Gorman and were originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081. https://doi.org/10.1371/journal.pone.0090081\n\n\nMeet the penguins!\n\nFigure 2. Palmer penguin species (artwork by @allison_horst).\n\n\nFigure 3. Depiction of morphometric bill measurements (artwork by @allison_horst)."
  },
  {
    "objectID": "Week3HW.html#our-data-set-palmer-penguins",
    "href": "Week3HW.html#our-data-set-palmer-penguins",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Our data set: Palmer Penguins",
    "text": "Our data set: Palmer Penguins\nThe Palmer Penguins dataset includes morphometric information on three different species of penguins across three different islands in Antarctica monitored by the Palmer Station Long Term Ecological Research study area. These data were made available by Dr. Kristen Gorman and were originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081. https://doi.org/10.1371/journal.pone.0090081\n\n\nMeet the penguins!\n\nFigure 2. Palmer penguin species (artwork by @allison_horst).\n\n\nFigure 3. Depiction of morphometric bill measurements (artwork by @allison_horst).\nRun the code chunk below to load the data.\nAdd another line of code to the chunk that will output a list of all your columns, what types of variables exist in those columns, and a couple observations from each column. Screenshot your code and output for your HW submission.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see that there are a number of measurements in our data set, including the bill measurements, flipper length, body mass, sex, and year.\nHowever, looking at the data this way, we can’t really discern patterns that might exist. For example, which of the penguin species is the smallest by weight? Do all the species show differences in their body morphometrics with sex? Is there one island that seems to have larger penguins than another?\nBy visualizing the data we can find answers to these questions and more!"
  },
  {
    "objectID": "Week3HW.html#lets-visualize-some-data",
    "href": "Week3HW.html#lets-visualize-some-data",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Let’s visualize some data!",
    "text": "Let’s visualize some data!\nIn this section we will demonstrate how to make a visualization using ggplot2.\nFor this first example, each line of code includes a comment (denoted by #) that describes what that line is doing. In general, it’s good practice to go line by line in code you receive to ensure you fully understand what it’s doing.\nIn the exercise code chunks, you will be required to fill in the missing code (denoted by #FILLMEIN) to create the visualization.\n\nDemonstration:\nWe are going to start by making a plot that will show us the relationship between flipper length and body mass by species. Spend some time looking at the code and consider what you think the resulting plot will look like before running the chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDoes the resulting plot match what you expected the code to generate?\nEXERCISE 1:\nAdjust the code chunk below to create a plot that shows the relationship between bill length and body mass by species. Screenshot your code and resulting plot for your homework submission.\n(HINT: You might want to refer back to your column names to ensure you are inputting the write variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nANALYSIS INTERLUDE:\nBased on your plots, do you think flipper length or bill length is better at predicting body mass? Which species do you think is the largest on average?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week3HW.html#more-ggplot2-use-cases",
    "href": "Week3HW.html#more-ggplot2-use-cases",
    "title": "Week 3: Data Visualization Part 1",
    "section": "More ggplot2 use cases",
    "text": "More ggplot2 use cases\nRun the code chunks in this section to see how visualizations can help us get answers to research questions related to the penguins data set.\nResearch Question: What is the distribution of bill depth measurements?\nWe can use a histogram to plot distributions of numerical variables. Notice we only need to provide an x variable, as the histogram by default will plot the count of observations on the y axis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see a roughly bi-modal distribution of bill lengths across the entire data set, with peaks around 38-42 mm and 45-50 mm.\nResearch Question: How does the body mass of penguins differ across islands?\nWe can use a box plot or violin plot to look for differences across categorical variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth of these plots show us that Biscoe Island has penguins with higher body mass on average.\n\nResearch Question: Is the relative distribution of bill length and flipper length across species conserved across both variables?\nWe can layer multiple geoms to get more insight into our data, as seen below. Notice we are also adding an argument for “color” in the aes() to specify we want our geom elements to be colored based on species.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see that flipper length is consistently highest for Gentoo penguins, but the highest bill lengths are shared by Gentoo and Chinstrap penguins. Adelie penguins are consistently smallest for both morphometrics."
  },
  {
    "objectID": "Week3HW.html#final-exercise-your-turn",
    "href": "Week3HW.html#final-exercise-your-turn",
    "title": "Week 3: Data Visualization Part 1",
    "section": "FINAL EXERCISE: Your turn!",
    "text": "FINAL EXERCISE: Your turn!\nCreate three visualizations addressing the following research questions:\n\nWhich island has the most Gentoo penguins?\nDo males have larger body mass on average than females?\nIs the relative distribution of bill length and bill depth of species conserved across both variables?\n\nTo receive full points for this exercise, you should provide a written answer to the each of research questions based on your visualizations. Screen shot the plot and the written answer and include it in your HW submission.\nHINT: You might need to explore some other geom options.\nResearch Question: Which island has the most Gentoo penguins?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Do males have larger body mass on average than females?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Is the relative distribution of bill length and bill depth of species conserved across both variables?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week3HW.html#citations-and-helpful-links",
    "href": "Week3HW.html#citations-and-helpful-links",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Citations And Helpful Links",
    "text": "Citations And Helpful Links\nThis lab was created University of the Virgin Islands Data Science program using ideas, information, and inspiration from the following sources:\n\nggplot2 documentation\nPalmer Penguins\nChatGPT\n\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "Week4HW.html#the-problem-of-plastic",
    "href": "Week4HW.html#the-problem-of-plastic",
    "title": "Week 4: Global Plastic Waste",
    "section": "The problem of plastic",
    "text": "The problem of plastic\nPlastic pollution is a major and growing problem, negatively affecting oceans and wildlife health. Our World in Data has a lot of great data at various levels including globally, per country, and over time. For this lab we focus on data from 2010.\nAdditionally, National Geographic ran a data visualization communication contest on plastic waste as seen here.\n\nImage: Mahamed Abdulraheem - Shutterstock.com"
  },
  {
    "objectID": "Week4HW.html#plastic-data",
    "href": "Week4HW.html#plastic-data",
    "title": "Week 4: Global Plastic Waste",
    "section": "Plastic data",
    "text": "Plastic data\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. By typing library(tidyverse) we are asking R to load all of the tidyverse packages, including ggplot2. We are also going to load in our global plastic waste data set from a .csv file stored on my computer using the read_csv() function.\n\nknitr::opts_chunk$set(echo = TRUE) \n\nlibrary(tidyverse) #this call loads all tidyverse packages (including ggplot2)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThat data set we have loaded has the following variable descriptions:\n\ncode: 3 Letter country code\nentity: Country name\ncontinent: Continent name\nyear: Year\ngdp_per_cap: GDP per capita constant 2011 international $, rate\nplastic_waste_per_cap: Amount of plastic waste per capita in kg/day\nmismanaged_plastic_waste_per_cap: Amount of mismanaged plastic waste per capita in kg/day\nmismanaged_plastic_waste: Tonnes of mismanaged plastic waste\ncoastal_pop: Number of individuals living on/near coast\ntotal_pop: Total population according to Gapminder\n\nWhat are some ways you can explore the data set we just loaded in the R environment? Type a couple things in the chunk below and screenshot the resulting code/output for your HW assignment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week4HW.html#exercises",
    "href": "Week4HW.html#exercises",
    "title": "Week 4: Global Plastic Waste",
    "section": "Exercises",
    "text": "Exercises\nLet’s start by looking at the distribution of plastic waste per capita in 2010.\n\nggplot(data = plastic_waste, aes(x = plastic_waste_per_cap)) +\n  geom_histogram(binwidth = 0.2)\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nOne country stands out as an unusual observation at the top of the distribution. One way of identifying this country is to filter the data for countries where plastic waste per capita is greater than 3.5 kg/person.\n\nplastic_waste %&gt;% \n  filter(plastic_waste_per_cap &gt; 3.5)\n\n  code              entity     continent year gdp_per_cap plastic_waste_per_cap\n1  TTO Trinidad and Tobago North America 2010    31260.91                   3.6\n  mismanaged_plastic_waste_per_cap mismanaged_plastic_waste coastal_pop\n1                             0.19                    94066     1358433\n  total_pop\n1   1341465\n\n\nDid you expect this result? You might consider doing some research on Trinidad and Tobago to see why plastic waste per capita is so high there, or whether this is a data error.\n\nPlot, using histograms, the distribution of plastic waste per capita faceted by continent. (HINT: Have you watched the video for this week yet??)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat can you say about how the continents compare to each other in terms of their plastic waste per capita?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnother way of visualizing numerical data is using density plots.\n\nggplot(data = plastic_waste, aes(x = plastic_waste_per_cap)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nAnd compare distributions across continents by colouring density curves by continent.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThe resulting plot may be a little difficult to read, so let’s also fill the curves in with colours as well.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent, \n                     fill = continent)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThe overlapping colours make it difficult to tell what’s happening with the distributions in continents plotted first, and hence covered by continents plotted over them. We can change the transparency level of the fill color to help with this. The alpha argument takes values between 0 and 1: 0 is completely transparent and 1 is completely opaque. There is no way to tell what value will work best, so you just need to try a few.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent, \n                     fill = continent)) +\n  geom_density(alpha = 0.7)\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThis still doesn’t look great…\n\nRecreate the density plots above using a different (lower) alpha level that works better for displaying the density curves for all continents.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDescribe why we defined the color and fill of the curves by mapping aesthetics of the plot but we defined the alpha level as a characteristic of the plotting geom.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnd yet another way to visualize this relationship is using side-by-side box plots.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = continent, \n                     y = plastic_waste_per_cap)) +\n  geom_boxplot()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nConvert your side-by-side box plots from the previous task to violin plots.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat do the violin plots reveal that box plots do not? What features are apparent in the box plots but not in the violin plots?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week4HW.html#do-it-on-your-own",
    "href": "Week4HW.html#do-it-on-your-own",
    "title": "Week 4: Global Plastic Waste",
    "section": "Do it on your own",
    "text": "Do it on your own\n**Remember:** We use `geom_point()` to make scatterplots\n\nVisualize the relationship between plastic waste per capita and mismanaged plastic waste per capita using a scatterplot. \n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDescribe the relationship.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nColor the points in the scatterplot by continent.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDoes there seem to be any clear distinctions between continents with respect to how plastic waste per capita and mismanaged plastic waste per capita are associated?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVisualize the relationship between plastic waste per capita and total population as well as plastic waste per capita and coastal population. You will need to make two separate plots.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDo either of these pairs of variables appear to be more strongly linearly associated?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nRecreate the plot pictured below. (HINT: The x-axis is a calculated variable. One country with plastic waste per capita over 3kg/day has been filtered out. And the data are not only represented with points on the plot but also a smooth curve. The “smooth” should help you pick which geom to use.)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWrite an interpretation of what you see in context of the data.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp1.html",
    "href": "DSWksp1.html",
    "title": "Week 3: Data Visualization Part 1",
    "section": "",
    "text": "In this tutorial, we will introduce some reasons why data visualization is a critical aspect of data science and demonstrate the basics of creating effective data visualizations in R using ggplot2.\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. For example, ggplot2 is a package with functions that give us a lot of flexibility in creating data visualizations.\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(dplyr) #package with useful data manipulation functions\nlibrary(ggplot2) #package allowing us to make plots\nlibrary(medicaldata) #package containing our data"
  },
  {
    "objectID": "DSWksp1.html#why-is-data-visualization-important",
    "href": "DSWksp1.html#why-is-data-visualization-important",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Why is data visualization important?",
    "text": "Why is data visualization important?\nWhen we consider the data science workflow (Fig. 1), there is not a step that explicitly says “data visualization”. This is because data visualization is so essential that it occurs throughout the entire process!\n\nFigure 1. Data science life cycle. (Drawn by Chanin Nantasenamat in collaboration with Ken Jee; Source Article)\nAt its core, data visualization is used to simplify complex data. Data scientists often work with very large data sets (think millions of rows) and it is exceedingly difficult to conceptualize those data when interacting with them in table form. Using data visualization techniques, data scientists are able to:\n\nidentify (sometimes unexpected) patterns and trends in data\nidentify errors or weirdnesses in data\nestablish expectations for relationships in data to inform understanding of analysis results\ncommunicate the results of their efforts to others\n\nYour first step is ALWAYS to visualize your data!"
  },
  {
    "objectID": "DSWksp1.html#data-visualization-in-r",
    "href": "DSWksp1.html#data-visualization-in-r",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Data visualization in R",
    "text": "Data visualization in R\nThere are a number of different tools that can aid in visualizing data in the R environment. Below is a selection of some of the tools available.\n\nggplot2: A powerful and flexible plotting package based on the grammar of graphics, allowing for the creation of complex multi-layered plots with consistent syntax.\nbase R: The default plotting system in R, offering simple and straightforward functions for plotting with basic customization options. (I often use base R plots for quick exploratory visualizations).\nplotly: An interactive graphing package that builds on ggplot2, allowing users to create dynamic, web-based interactive visualizations. For example, you can have a plot display a written value when hovering over a data point.\nshiny: A web application framework for R that allows users to create interactive web apps with reactive elements, including dynamic and responsive plots. This is a common tool for creating interactive data dashboards in R.\n\nYou are encouraged to explore these tools and others, but for the purposes of this lab, we will be focusing on ggplot2. You can find additional information on the ggplot2 package here."
  },
  {
    "objectID": "DSWksp1.html#our-data-set-james-linds-scurvy-data",
    "href": "DSWksp1.html#our-data-set-james-linds-scurvy-data",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Our data set: James Lind’s Scurvy Data",
    "text": "Our data set: James Lind’s Scurvy Data\nScurvy was a common affliction among sailors in the 1700s. James Lind’s scurvy dataset includes information on the severity of symptoms of twelve scurvy patients after being treated with one of the following remedies: cider, dilute sulfuric acide, sea water, vinegar, citrus, and purgative mixture. These data are included in the medicaldata package in R and were originally published in James Lind’s A Treatise on the Scurvy in Three Parts in 1757.\n\nArrrr, Ye Got Scurvy Mate?\n \nRun the code chunk below to load the data and take a quick look at it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see the data includes information on the patient id (study_id), treatment, dosing regimen, severity of symptoms, and whether the sailors were fit for duty after treatment.\nHowever, looking at the data this way, we can’t really discern patterns that might exist. For example, which treatment seemed to reduce the severity of symptoms? Which treatment was associated with the lowest severity of gum rot overall?\nBy visualizing the data we can find answers to these questions and more!"
  },
  {
    "objectID": "DSWksp1.html#lets-visualize-some-data",
    "href": "DSWksp1.html#lets-visualize-some-data",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Let’s visualize some data!",
    "text": "Let’s visualize some data!\nIn this section we will demonstrate how to make a visualization using ggplot2.\nFor this first example, each line of code includes a comment (denoted by #) that describes what that line is doing. In general, it’s good practice to go line by line in code you receive to ensure you fully understand what it’s doing.\nIn the exercise code chunks, you will be required to fill in the missing code (denoted by #FILLMEIN) to create the visualization.\n\nDemonstration:\nWe are going to start by making a plot that will show us the number of patients associated with each level of symptom severity for gum rot colored by treatment type. Spend some time looking at the code and consider what you think the resulting plot will look like before running the chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDoes the resulting plot match what you expected the code to generate?\nEXERCISE 1:\nAdjust the code chunk below to create a plot that will show us the number of patients associated with each level of symptom severity for skin sores colored by treatment type.\n(HINT: You might want to refer back to your column names to ensure you are inputting the right variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nANALYSIS INTERLUDE:\nBased on your plots, were there more patients with sever gum rot or skin sores? Which treatment do you think is the best so far?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp1.html#more-ggplot2-use-cases",
    "href": "DSWksp1.html#more-ggplot2-use-cases",
    "title": "Week 3: Data Visualization Part 1",
    "section": "More ggplot2 use cases",
    "text": "More ggplot2 use cases\nRun the code chunks in this section to see how visualizations can help us get answers to research questions related to the penguins data set.\nResearch Question: Which symptom had the most severe cases?\nTo answer this question it will help us if our data is in long format. This will allow us to have a single column for symptom, rather than each symptom having it’s own column. Take a look at the output from the code chunk below and notice the changes to the data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see now all our symptom columns have been collapsed into a single column “symptom”. This also means that our study_id, treatment, and dosing_regimen_for_scurvy columns have repeated rows for each unique symptom value.\nHaving the data formatted this way makes it easier to make visualizations comparing symptoms.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: How does the body mass of penguins differ across islands?\nWe can use a box plot or violin plot to look for differences across categorical variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth of these plots show us that Biscoe Island has penguins with higher body mass on average.\n\nResearch Question: Is the relative distribution of bill length and flipper length across species conserved across both variables?\nWe can layer multiple geoms to get more insight into our data, as seen below. Notice we are also adding an argument for “color” in the aes() to specify we want our geom elements to be colored based on species.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see that flipper length is consistently highest for Gentoo penguins, but the highest bill lengths are shared by Gentoo and Chinstrap penguins. Adelie penguins are consistently smallest for both morphometrics."
  },
  {
    "objectID": "DSWksp1.html#final-exercise-your-turn",
    "href": "DSWksp1.html#final-exercise-your-turn",
    "title": "Week 3: Data Visualization Part 1",
    "section": "FINAL EXERCISE: Your turn!",
    "text": "FINAL EXERCISE: Your turn!\nCreate three visualizations addressing the following research questions:\n\nDoes the incidence of scurvy seem to be related to height?\nDoes the incidence of scurvy seem to be related to age?\nWhich ship had the highest incidence of scurvy? Can you think of an explanation for your answer? (HINT: think of when James Lind’s publication was released)\n\nResearch Question: Does the incidence of scurvy seem to be related to height?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Does the incidence of scurvy seem to be related to age?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Which ship had the highest incidence of scurvy? Can you think of an explanation for your answer? (HINT: think of when James Lind’s publication was released)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "DSWksp1.html#citations-and-helpful-links",
    "href": "DSWksp1.html#citations-and-helpful-links",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Citations And Helpful Links",
    "text": "Citations And Helpful Links\nThis lab was created University of the Virgin Islands Data Science program using ideas, information, and inspiration from the following sources:\n\nggplot2 documentation\nPalmer Penguins\nChatGPT\n\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "DSWksp1.html#our-data-set-james-linds-scurvy-study",
    "href": "DSWksp1.html#our-data-set-james-linds-scurvy-study",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Our data set: James Lind’s scurvy study",
    "text": "Our data set: James Lind’s scurvy study\nScurvy was a common affliction among sailors in the 1700s. James Lind’s scurvy dataset includes information on the severity of symptoms of twelve scurvy patients after being treated with one of the following remedies: cider, dilute sulfuric acide, sea water, vinegar, citrus, and purgative mixture. These data are included in the medicaldata package in R and were originally published in James Lind’s A Treatise on the Scurvy in Three Parts in 1757.\n\nArrrr, Ye Got Scurvy Mate?\n \nRun the code chunk below to load the data and take a quick look at it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see the data includes information on the patient id (study_id), treatment, dosing regimen, severity of symptoms, and whether the sailors were fit for duty after treatment.\nHowever, looking at the data this way, we can’t really discern patterns that might exist. For example, which treatment seemed to reduce the severity of symptoms? Which treatment was associated with the lowest severity of gum rot overall?\nBy visualizing the data we can find answers to these questions and more!"
  },
  {
    "objectID": "DSWksp1.html#asking-more-scurvy-questions",
    "href": "DSWksp1.html#asking-more-scurvy-questions",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Asking more scurvy questions",
    "text": "Asking more scurvy questions\nRun the code chunks in this section to see how visualizations can help us get answers to research questions related to the penguins data set.\nResearch Question: Which symptom had the most severe cases?\nTo answer this question it will help us if our data is in long format. This will allow us to have a single column for symptom, rather than each symptom having it’s own column. Take a look at the output from the code chunk below and notice the changes to the data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see now all our symptom columns have been collapsed into a single column “symptom”. This also means that our study_id, treatment, and dosing_regimen_for_scurvy columns have repeated rows for each unique symptom value.\nHaving the data formatted this way makes it easier to make visualizations comparing symptoms.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBased on this figure, we can see that lassitude had the highest number of severe cases, followed by skin sores and weakness of the knees.\nEXERCISE 2:\nAdjust the code chunk below to create a plot that will show us which treatment type seemed to perform the best for reducing severity of scurvy symptoms.\n(HINT: You might want to refer back to your column names to ensure you are inputting the right variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhich treatment works best for treating scurvy?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp1.html#adding-continuous-variables",
    "href": "DSWksp1.html#adding-continuous-variables",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Adding continuous variables",
    "text": "Adding continuous variables\nThe data sets we have been working with thus far have consisted solely of categorical data (e.g. Severity (none, mile, moderate, severe). This means that we are limited to looking at the number of observations in each category, chiefly with bar plots. Numerical or continuous data consists of continuous number values and opens up new possibilities for data visualization.\nWe are going to use a made up data set to explore how we visualize continuous data. These data will consist of observations of incidences of scurvy among ship crews. They will include data on the weight, height, and age of each sailor, whether they contracted scurvy or not, which ship they sailed on, and they year the ship was active.\nRun the code chunk below to generate the new data set (don’t worry if you don’t follow what the code is doing, we just need the data).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow that we have the data you can take a quick look at it\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that weight, height, and age are all numeric values. Also scurvy incidence is coded as N for no scurvy or Y for yes scurvy.\nResearch Question: How does the weight of sailors differ across ships?\nWe can use a box plot or violin plot to look for differences in a continuous variable (weight) across categorical variables (ship).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth of these plots show us that the Sea Serpent had the heaviest sailors.\n\nResearch Question: What is the relationship between height and weight?\nWe can use a scatterplot to look at the relationship of two continuous variables against each other.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUnsurprisingly, we see that weight generally increases with height.\nResearch Question: Does the relationship between height and weight differ across ships?\nWe can use color to show whether continuous relationships differ across a categorical variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt doesn’t look like there is much a difference in the trend between ships, but the Sea Serpent tends to have shorter sailors than the other ships."
  }
]