[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC/SCI 230: Data Science 1",
    "section": "",
    "text": "Instructor: Kayla Blincow, PhD (aka Kayla Israel)\n\n\nWelcome!\nThis website houses all of the coding exercises and assignments for CSC/SCI 230 Data Science 1. All other course documentation can be found on Brightspace.\n\n\nSchedule\n\n\n\nWeek\nDates\nMaterials\n\n\n\n\n1\n8/19 - 8/23\nHomework 1\n\n\n2\n8/26 - 8/30\nHomework 2\n\n\n3\n9/3 - 9/6\nHomework 3\n\n\n4\n9/9 - 9/13\nHomework 4\n\n\n5\n9/16 - 9/20\nHomework 5\n\n\n6\n9/23 - 9/27\nHomework 6\n\n\n7\n9/30 - 10/4\nHomework 7\n\n\n8\n10/7 - 10/11\nHomework 8\n\n\n9\n10/14 - 10/18\nHomework 9\n\n\n10\n10/21 - 10/25\nHomework 10\n\n\n11\n10/28 - 10/31\nHomework 11\n\n\n12\n11/4 - 11/8\nHomework 12\n\n\n13\n11/12 - 11/15\nHomework 13\n\n\n14\n11/18 - 11/22\nHomework 14\n\n\n15\n11/25 - 11/26\nHomework 15\n\n\nURISE DS Wksp Day 1\n8/28\nDS Wksp Tutorial 1\n\n\nURISE DS Wksp Day 2\n9/4\nDS Wksp Tutorial 2\n\n\nURISE DS Wksp Day 3\n9/8\nDS Wksp Tutorial 3\n\n\n2 (Vis Accessible)\n8/26 - 8/30\nHomework 2 (Vis Accessible)"
  },
  {
    "objectID": "Week3HW.html",
    "href": "Week3HW.html",
    "title": "Week 3: Data Visualization Part 1",
    "section": "",
    "text": "In this tutorial, we will introduce some reasons why data visualization is a critical aspect of data science and demonstrate the basics of creating effective data visualizations in R using ggplot2.\nA COUPLE IMPORTANT NOTES:\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. For example, ggplot2 is a package with functions that give us a lot of flexibility in creating data visualizations.\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(dplyr) #package with useful data manipulation functions\nlibrary(ggplot2) #package allowing us to make plots\nlibrary(palmerpenguins) #package containing our data"
  },
  {
    "objectID": "Week3HW.html#why-is-data-visualization-important",
    "href": "Week3HW.html#why-is-data-visualization-important",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Why is data visualization important?",
    "text": "Why is data visualization important?\nWhen we consider the data science workflow (Fig. 1), there is not a step that explicitly says “data visualization”. This is because data visualization is so essential that it occurs throughout the entire process!\n\nFigure 1. Data science life cycle. (Drawn by Chanin Nantasenamat in collaboration with Ken Jee; Source Article)\nAt its core, data visualization is used to simplify complex data. Data scientists often work with very large data sets (think millions of rows) and it is exceedingly difficult to conceptualize those data when interacting with them in table form. Using data visualization techniques, data scientists are able to:\n\nidentify (sometimes unexpected) patterns and trends in data\nidentify errors or weirdnesses in data\nestablish expectations for relationships in data to inform understanding of analysis results\ncommunicate the results of their efforts to others\n\nYour first step is ALWAYS to visualize your data!"
  },
  {
    "objectID": "Week3HW.html#data-visualization-in-r",
    "href": "Week3HW.html#data-visualization-in-r",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Data visualization in R",
    "text": "Data visualization in R\nThere are a number of different tools that can aid in visualizing data in the R environment. Below is a selection of some of the tools available.\n\nggplot2: A powerful and flexible plotting package based on the grammar of graphics, allowing for the creation of complex multi-layered plots with consistent syntax.\nbase R: The default plotting system in R, offering simple and straightforward functions for plotting with basic customization options. (I often use base R plots for quick exploratory visualizations).\nplotly: An interactive graphing package that builds on ggplot2, allowing users to create dynamic, web-based interactive visualizations. For example, you can have a plot display a written value when hovering over a data point.\nshiny: A web application framework for R that allows users to create interactive web apps with reactive elements, including dynamic and responsive plots. This is a common tool for creating interactive data dashboards in R.\n\nYou are encouraged to explore these tools and others, but for the purposes of this lab, we will be focusing on ggplot2. You can find additional information on the ggplot2 package here."
  },
  {
    "objectID": "Week3HW.html#our-data-set-palmer-penguins",
    "href": "Week3HW.html#our-data-set-palmer-penguins",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Our data set: Palmer Penguins",
    "text": "Our data set: Palmer Penguins\nThe Palmer Penguins dataset includes morphometric information on three different species of penguins across three different islands in Antarctica monitored by the Palmer Station Long Term Ecological Research study area. These data were made available by Dr. Kristen Gorman and were originally published in:\n\nGorman KB, Williams TD, Fraser WR (2014). Ecological sexual dimorphism and environmental variability within a community of Antarctic penguins (genus Pygoscelis). PLoS ONE 9(3):e90081. https://doi.org/10.1371/journal.pone.0090081\n\n\nMeet the penguins!\n\nFigure 2. Palmer penguin species (artwork by @allison_horst).\n\n\nFigure 3. Depiction of morphometric bill measurements (artwork by @allison_horst).\nRun the code chunk below to load the data.\nAdd another line of code to the chunk that will output a list of all your columns, what types of variables exist in those columns, and a couple observations from each column. The necessary function was mentioned in the IDS- Data and visualisation video (around the 2 minute mark). Screenshot your code and output for your HW submission.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see that there are a number of measurements in our data set, including the bill measurements, flipper length, body mass, sex, and year.\nHowever, looking at the data this way, we can’t really discern patterns that might exist. For example, which of the penguin species is the smallest by weight? Do all the species show differences in their body morphometrics with sex? Is there one island that seems to have larger penguins than another?\nBy visualizing the data we can find answers to these questions and more!"
  },
  {
    "objectID": "Week3HW.html#lets-visualize-some-data",
    "href": "Week3HW.html#lets-visualize-some-data",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Let’s visualize some data!",
    "text": "Let’s visualize some data!\nIn this section we will demonstrate how to make a visualization using ggplot2.\nFor this first example, each line of code includes a comment (denoted by #) that describes what that line is doing. In general, it’s good practice to go line by line in code you receive to ensure you fully understand what it’s doing.\nIn the exercise code chunks, you will be required to fill in the missing code (denoted by #FILLMEIN) to create the visualization.\n\nDemonstration:\nWe are going to start by making a plot that will show us the relationship between flipper length and body mass by species. Spend some time looking at the code and consider what you think the resulting plot will look like before running the chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDoes the resulting plot match what you expected the code to generate?\nEXERCISE 1:\nAdjust the code chunk below to create a plot that shows the relationship between bill length and body mass by species. Screenshot your code and resulting plot for your homework submission.\n(HINT: You might want to refer back to your column names to ensure you are inputting the right variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nANALYSIS INTERLUDE:\nBased on your plots, do you think flipper length or bill length is better at predicting body mass? Which species do you think is the largest on average?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week3HW.html#more-ggplot2-use-cases",
    "href": "Week3HW.html#more-ggplot2-use-cases",
    "title": "Week 3: Data Visualization Part 1",
    "section": "More ggplot2 use cases",
    "text": "More ggplot2 use cases\nRun the code chunks in this section to see how visualizations can help us get answers to research questions related to the penguins data set.\nResearch Question: What is the distribution of bill depth measurements?\nWe can use a histogram to plot distributions of numerical variables. Notice we only need to provide an x variable, as the histogram by default will plot the count of observations on the y axis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see a roughly bi-modal distribution of bill lengths across the entire data set, with peaks around 38-42 mm and 45-50 mm.\nResearch Question: How does the body mass of penguins differ across islands?\nWe can use a box plot or violin plot to look for differences across categorical variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth of these plots show us that Biscoe Island has penguins with higher body mass on average.\n\nResearch Question: Is the relative distribution of bill length and flipper length across species conserved across both variables?\nWe can layer multiple geoms to get more insight into our data, as seen below. Notice we are also adding an argument for “color” in the aes() to specify we want our geom elements to be colored based on species.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see that flipper length is consistently highest for Gentoo penguins, but the highest bill lengths are shared by Gentoo and Chinstrap penguins. Adelie penguins are consistently smallest for both morphometrics."
  },
  {
    "objectID": "Week3HW.html#final-exercise-your-turn",
    "href": "Week3HW.html#final-exercise-your-turn",
    "title": "Week 3: Data Visualization Part 1",
    "section": "FINAL EXERCISE: Your turn!",
    "text": "FINAL EXERCISE: Your turn!\nCreate three visualizations addressing the following research questions:\n\nWhich island has the most Gentoo penguins?\nDo males have larger body mass on average than females?\nIs the relative distribution of bill length and bill depth of species conserved across both variables?\n\nTo receive full points for this exercise, you should provide a written answer to the each of research questions based on your visualizations. Screen shot the plot and the written answer and include it in your HW submission.\nHINT: You might need to explore some other geom options.\nResearch Question: Which island has the most Gentoo penguins? (You might consider a bar plot…)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Do males have larger body mass on average than females?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Is the relative distribution of bill length and bill depth of species conserved across both variables?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week3HW.html#citations-and-helpful-links",
    "href": "Week3HW.html#citations-and-helpful-links",
    "title": "Week 3: Data Visualization Part 1",
    "section": "Citations And Helpful Links",
    "text": "Citations And Helpful Links\nThis lab was created University of the Virgin Islands Data Science program using ideas, information, and inspiration from the following sources:\n\nggplot2 documentation\nPalmer Penguins\nChatGPT\n\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "DSWksp3.html",
    "href": "DSWksp3.html",
    "title": "URISE Workshop: Data Analysis",
    "section": "",
    "text": "In this tutorial, we will be walking through how to use Linear Discriminant Analysis to predict whether towns are at high risk of an outbreak of swine flu (H1N1). NOTE: These are not real data on H1N1.\nMake sure to click “Run Code” in all the interactive code chunks to make sure this tutorial will work.\nSome early set up for our data (aka data manipulation steps). Don’t worry about this code, just run the chunk."
  },
  {
    "objectID": "DSWksp3.html#what-is-machine-learning-classification",
    "href": "DSWksp3.html#what-is-machine-learning-classification",
    "title": "URISE Workshop: Data Analysis",
    "section": "What is Machine Learning Classification?",
    "text": "What is Machine Learning Classification?\nMachine learning, in terms of classification, refers to a type of supervised learning where the algorithm learns to categorize data into predefined classes or labels. The goal of a classification model is to predict the class or category of new, unseen data based on patterns learned from a labeled dataset during training.\nThis has valuable applications in many fields, including health fields where it is used to:\n\ngenerate personalized treatment plans\npredict side effects\nhave computers visually identify cancerous tumors\nidentify at-risk populations\npredict the spread of disease"
  },
  {
    "objectID": "DSWksp3.html#linear-discriminant-analysis-lda",
    "href": "DSWksp3.html#linear-discriminant-analysis-lda",
    "title": "URISE Workshop: Data Analysis",
    "section": "Linear Discriminant Analysis (LDA)",
    "text": "Linear Discriminant Analysis (LDA)\nLinear Discriminant Analysis (LDA) is a popular technique used in machine learning for classification and dimensionality reduction when working with linearly separable variables. LDA is primarily used to classify data into groups by finding a linear combination of variables that best separates the groups. It projects the data onto a lower-dimensional space where separation between classes is maximized."
  },
  {
    "objectID": "DSWksp3.html#our-scenario-h1n1-swine-flu",
    "href": "DSWksp3.html#our-scenario-h1n1-swine-flu",
    "title": "URISE Workshop: Data Analysis",
    "section": "Our scenario: H1N1 Swine Flu",
    "text": "Our scenario: H1N1 Swine Flu\nSwine influenza is a respiratory disease of pigs caused by type A influenza viruses. In the 2009-10 flu season, a new H1N1 virus began causing illness in humans. It resulted in a pandemic that caused an estimated 284,400 deaths worldwide.\n\nFigure 1. Symptoms of Swine Flu (Wikipedia)\n2024-2025 Season Outbreak\nFor the purposes of this exercise, we are going to imagine that the 2024-2025 flu season has also seen an outbreak of H1N1 that can infect humans. Epidemiologists would like to notify towns that are at risk of experiencing severe outbreaks to be extra cautious, but first they need to identify which towns are at high risk. They have gathered a data set of towns that have already experienced outbreaks (H1N1_known). The data set includes a measure of the severity level of the outbreak (high, mid, or low) and measures of four variables that likely influence outbreak severity.\nThe variables they measured are:\n\nVaccination_Availability: this is a scaled measure of the availability of flu vaccinations in each town. Generally, towns with lower availability of vaccinations will be at higher risk of flu outbreaks.\nTravel_Metric: this is a scaled measure of the amount of travel in and out of the town. Generally, towns that have a lot of folks coming and going are more likely to get exposed to new viruses.\nDist_Nearest_Outbreak: this is a scaled measure of how far the town is from the nearest outbreak of H1N1. Towns in closer proximity to other towns that have already had an outbreak are generally at higher risk of experiencing a severe outbreak.\nMedical_Awareness_Metric: this is a scaled measure of the culture around medical awareness and safety in the town. Generally towns with a higher value of this metric will be more aware of common flu avoidance measures, such as frequent hand washing, staying home when feeling under the weather, etc."
  },
  {
    "objectID": "DSWksp3.html#step-1-take-a-look-at-our-data",
    "href": "DSWksp3.html#step-1-take-a-look-at-our-data",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 1: Take a look at our data",
    "text": "Step 1: Take a look at our data\nRun the code chunk below to take a quick look at our data of known towns with outbreaks:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see that we have a column for each of our four variables, which are all numeric variables (&lt;dbl&gt;), and one column for the severity of the outbreak which is a categorical variable (&lt;fct&gt;).\nRun the code chunk below to print a few plots of our known data (NOTE: the final line of this code works because of my favorite package - patchwork - it’s amazing for making multi-panel plots):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see some basic trends in the data, but it would be hard to classify new towns based on looking at any of these metrics in isolation. They all have some overlap. Using LDA, we can classify towns using all the variables at once and do a better job predicting which towns are at high risk of a severe outbreak."
  },
  {
    "objectID": "DSWksp3.html#step-2-run-the-lda",
    "href": "DSWksp3.html#step-2-run-the-lda",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 2: Run the LDA",
    "text": "Step 2: Run the LDA\nWe will use the lda() function in the MASS package to fit the LDA model to our known data (or training data):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere is how to interpret the output of the model:\nPrior probabilities of group: These represent the proportions of each outbreak severity level group in the training set. For example, 30.8% of all towns in the training set had high severity outbreaks.\nGroup means: These display the mean values for each predictor variable for each severity level.\nCoefficients of linear discriminants: These display the linear combination of predictor variables that are used to form the decision rule of the LDA model. For example:\n\nLD1: - 0.609*Vaccination_Availability - 0.627*Travel_Metric + 3.560*Dist_Nearest_Outbreak + 2.144*Medical_Awareness_Metric\nLD2: .743*Vaccination_Availability + .754*Travel_Metric – 3.223*Dist_Nearest_Outbreak + 2.944*Medical_Awareness_Metric\n\nProportion of trace: These display the percentage separation achieved by each linear discriminant function."
  },
  {
    "objectID": "DSWksp3.html#step-3-plot-training-data-lda",
    "href": "DSWksp3.html#step-3-plot-training-data-lda",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 3: Plot training data LDA",
    "text": "Step 3: Plot training data LDA\nThe code below generates a two-dimensional plot with our linear discriminants as the x and y axes. This is essentially a two-dimensional representation of our four-dimensional data (four predictor variables) that shows how the LDA clustered our observations of towns based on the severity of H1N1 outbreaks.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see from this plot that the high severity outbreak towns separate distinctly from the low and mid-level severity outbreak towns. This suggests that we are probably going to do a pretty good job predicting high severity outbreak areas, but might have a harder time distinguishing between low and mid-level severity areas.\nLet’s see what happens when we try to predict the level of severity of outbreaks expected for new towns…"
  },
  {
    "objectID": "DSWksp3.html#step-4-use-the-lda-model-to-make-predictions",
    "href": "DSWksp3.html#step-4-use-the-lda-model-to-make-predictions",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 4: Use the LDA model to make predictions",
    "text": "Step 4: Use the LDA model to make predictions\nIn addition to our known data set, we also have a data set of towns that have not yet experienced an outbreak (H1N1_unknown). We would like to predict the severity of a potential H1N1 outbreak in these unknown towns based on our predictor variables: availability of vaccines, travel metric, distance to the nearest outbreak, and medical awareness metric.\nWe use the predict() function to do this. NOTE: This is a really handy function. It basically allows you to use (almost) any statistical model and predict across new values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis returns a list with three variables:\n\nclass: The predicted severity group\nposterior: The posterior probability that an observation belongs to each severity group\nx: The linear discriminants\n\nWe can quickly view each of these results for the first six observations in our test dataset:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSo we have used our LDA to make predictions. The above functions are useful, but this is a case where it is easier to understand what happened by using a visualization."
  },
  {
    "objectID": "DSWksp3.html#step-5-visualize-the-results",
    "href": "DSWksp3.html#step-5-visualize-the-results",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 5: Visualize the results",
    "text": "Step 5: Visualize the results\nLet’s plot our LDA again, but this time let’s see where our new unknown towns landed compared to the towns we did know.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe darker triangles show us the predicted severity of outbreaks for the unknown towns, and where they fall in this two-dimensional depiction of all of our variables compared to the known towns."
  },
  {
    "objectID": "DSWksp3.html#step-6-check-our-model",
    "href": "DSWksp3.html#step-6-check-our-model",
    "title": "URISE Workshop: Data Analysis",
    "section": "Step 6: Check our model",
    "text": "Step 6: Check our model\nAs the flu season progresses, we monitor the unknown towns to see if they have H1N1 outbreaks and then record the severity of the outbreak once it occurs. By collecting these data and getting the “true” answer, we can check to see how accurate our model was a predicting the severity of outbreaks.\nWe actually already have this information stored in our H1N1_unknown data file, and we can test to see how accurate our model was using the code below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n93.5% of the time we accurately predicted the level of severity of an H1N1 outbreak for new towns. That’s pretty good!\nWhat are some things we could do to improve the accuracy of our model?\nHopefully you can see how this type of analysis might be useful in the real world for informing health science outcomes, but also many, many other fields."
  },
  {
    "objectID": "DSWksp3.html#references",
    "href": "DSWksp3.html#references",
    "title": "URISE Workshop: Data Analysis",
    "section": "References",
    "text": "References\nMuch of this tutorial was pulled from: Linear Discriminant Analysis in R (Step-by-Step) (statology.org)\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "Week4HW.html",
    "href": "Week4HW.html",
    "title": "Week 4: Global Plastic Waste",
    "section": "",
    "text": "This tutorial is a modified version Data Science in Box’s Lab 02 - Global plastic waste found here. All material and concepts should be attributed to the Data Science in a Box initiative."
  },
  {
    "objectID": "Week4HW.html#the-problem-of-plastic",
    "href": "Week4HW.html#the-problem-of-plastic",
    "title": "Week 4: Global Plastic Waste",
    "section": "The problem of plastic",
    "text": "The problem of plastic\nPlastic pollution is a major and growing problem, negatively affecting oceans and wildlife health. Our World in Data has a lot of great data at various levels including globally, per country, and over time. For this lab we focus on data from 2010.\nAdditionally, National Geographic ran a data visualization communication contest on plastic waste as seen here.\n\nImage: Mahamed Abdulraheem - Shutterstock.com"
  },
  {
    "objectID": "Week4HW.html#plastic-data",
    "href": "Week4HW.html#plastic-data",
    "title": "Week 4: Global Plastic Waste",
    "section": "Plastic data",
    "text": "Plastic data\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. By typing library(tidyverse) we are asking R to load all of the tidyverse packages, including ggplot2. We are also going to load in our global plastic waste data set from a .csv file stored on my computer using the read_csv() function.\n\nknitr::opts_chunk$set(echo = TRUE) \n\nlibrary(tidyverse) #this call loads all tidyverse packages (including ggplot2)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThat data set we have loaded has the following variable descriptions:\n\ncode: 3 Letter country code\nentity: Country name\ncontinent: Continent name\nyear: Year\ngdp_per_cap: GDP per capita constant 2011 international $, rate\nplastic_waste_per_cap: Amount of plastic waste per capita in kg/day\nmismanaged_plastic_waste_per_cap: Amount of mismanaged plastic waste per capita in kg/day\nmismanaged_plastic_waste: Tonnes of mismanaged plastic waste\ncoastal_pop: Number of individuals living on/near coast\ntotal_pop: Total population according to Gapminder\n\nWhat are some ways you can explore the data set we just loaded in the R environment? Type a couple things in the chunk below and screenshot the resulting code/output for your HW assignment.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week4HW.html#exercises",
    "href": "Week4HW.html#exercises",
    "title": "Week 4: Global Plastic Waste",
    "section": "Exercises",
    "text": "Exercises\nLet’s start by looking at the distribution of plastic waste per capita in 2010.\n\nggplot(data = plastic_waste, aes(x = plastic_waste_per_cap)) +\n  geom_histogram(binwidth = 0.2)\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nOne country stands out as an unusual observation at the top of the distribution. One way of identifying this country is to filter the data for countries where plastic waste per capita is greater than 3.5 kg/person.\n\nplastic_waste %&gt;% \n  filter(plastic_waste_per_cap &gt; 3.5)\n\n  code              entity     continent year gdp_per_cap plastic_waste_per_cap\n1  TTO Trinidad and Tobago North America 2010    31260.91                   3.6\n  mismanaged_plastic_waste_per_cap mismanaged_plastic_waste coastal_pop\n1                             0.19                    94066     1358433\n  total_pop\n1   1341465\n\n\nDid you expect this result? You might consider doing some research on Trinidad and Tobago to see why plastic waste per capita is so high there, or whether this is a data error.\n\nPlot, using histograms, the distribution of plastic waste per capita faceted by continent. (HINT: Have you watched the video for this week yet??)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat can you say about how the continents compare to each other in terms of their plastic waste per capita?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnother way of visualizing numerical data is using density plots.\n\nggplot(data = plastic_waste, aes(x = plastic_waste_per_cap)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nAnd compare distributions across continents by colouring density curves by continent.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThe resulting plot may be a little difficult to read, so let’s also fill the curves in with colours as well.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent, \n                     fill = continent)) +\n  geom_density()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThe overlapping colours make it difficult to tell what’s happening with the distributions in continents plotted first, and hence covered by continents plotted over them. We can change the transparency level of the fill color to help with this. The alpha argument takes values between 0 and 1: 0 is completely transparent and 1 is completely opaque. There is no way to tell what value will work best, so you just need to try a few.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = plastic_waste_per_cap, \n                     color = continent, \n                     fill = continent)) +\n  geom_density(alpha = 0.7)\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nThis still doesn’t look great…\n\nRecreate the density plots above using a different (lower) alpha level that works better for displaying the density curves for all continents.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDescribe why we defined the color and fill of the curves by mapping aesthetics of the plot but we defined the alpha level as a characteristic of the plotting geom.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnd yet another way to visualize this relationship is using side-by-side box plots.\n\nggplot(data = plastic_waste, \n       mapping = aes(x = continent, \n                     y = plastic_waste_per_cap)) +\n  geom_boxplot()\n\nWarning: Removed 51 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nConvert your side-by-side box plots from the previous task to violin plots.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat do the violin plots reveal that box plots do not? What features are apparent in the box plots but not in the violin plots?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week4HW.html#do-it-on-your-own",
    "href": "Week4HW.html#do-it-on-your-own",
    "title": "Week 4: Global Plastic Waste",
    "section": "Do it on your own",
    "text": "Do it on your own\n**Remember:** We use `geom_point()` to make scatterplots\n\nVisualize the relationship between plastic waste per capita and mismanaged plastic waste per capita using a scatterplot. \n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDescribe the relationship.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nColor the points in the scatterplot by continent.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDoes there seem to be any clear distinctions between continents with respect to how plastic waste per capita and mismanaged plastic waste per capita are associated?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVisualize the relationship between plastic waste per capita and total population as well as plastic waste per capita and coastal population. You will need to make two separate plots.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDo either of these pairs of variables appear to be more strongly linearly associated?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nRecreate the plot pictured below. (HINT: The x-axis is a calculated variable. One country with plastic waste per capita over 3kg/day has been filtered out. And the data are not only represented with points on the plot but also a smooth curve. The “smooth” should help you pick which geom to use.)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWrite an interpretation of what you see in context of the data.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html",
    "href": "DSWksp2.html",
    "title": "URISE Workshop: Data Wrangling",
    "section": "",
    "text": "In this tutorial, we will introduce some of the basic tools used in data wrangling.\nMake sure to click “Run Code” in the interactive code chunks.\nNOTE: YOU CAN RUN JUST A PORTION OF ANY CODE CHUNK BY HIGHLIGHTING IT AND USING THE FOLLOWING KEYBOARD SHORTCUTS: PCS - (ctrl + Enter); MACs - (cmd + Enter)."
  },
  {
    "objectID": "DSWksp2.html#before-we-get-started-some-r-basics.",
    "href": "DSWksp2.html#before-we-get-started-some-r-basics.",
    "title": "URISE Workshop: Data Wrangling",
    "section": "Before we get started, some R basics.",
    "text": "Before we get started, some R basics.\nUp until now, we have been focusing on gaining enough R coding skills to be able to demonstrate the insights that can be gained from data chiefly through data visualization. Now, we are transitioning into topics that will require a stronger understanding of certain R functions.\nLet’s start by reviewing how we create objects in our R environment:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEven though we are moving to a different code chunk, thing1 and thing2 still exist in our coding environment. That means we can continue to use them.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt is a good idea to store values as objects if you think you are going to need them in the future.\nR is made up of packages and functions, which make it easier for us all to do commonly needed actions. This is a double edged sword. Pre-made functions make it quicker to get some things done, but you don’t necessarily know that the code that is behind the function is doing what you think it’s doing.\nHere are a few examples of functions you might need:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCalculating basic summary statistics:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nRandomly sampling values from a normal distribution:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNavigating matrices and dataframes:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#data-wrangling-using-dplyr",
    "href": "DSWksp2.html#data-wrangling-using-dplyr",
    "title": "URISE Workshop: Data Wrangling",
    "section": "Data Wrangling using dplyr",
    "text": "Data Wrangling using dplyr\nNote: This tutorial is largely created by Kevin Markham–I added some exercises for students to work through.\n\ndplyr is a package from the Tidyverse that makes data wrangling much more intuitive and fun!\n\nWhy even use dplyr?\n\nGreat for data exploration and transformation\nIntuitive to write and easy to read, especially when using the “chaining” syntax (covered below)\nFast on data frames\n\n\n\ndplyr functionality\n\nFive basic verbs: filter, select, arrange, mutate, summarise (plus group_by)\nCan work with data stored in databases and data tables\nJoins: inner join, left join, semi-join, anti-join (not covered below)\nWindow functions for calculating ranking, offsets, and more"
  },
  {
    "objectID": "DSWksp2.html#our-example-data-set",
    "href": "DSWksp2.html#our-example-data-set",
    "title": "URISE Workshop: Data Wrangling",
    "section": "Our example data set",
    "text": "Our example data set\n\ndplyr will mask a few base functions (namely: filter())\nhflights is flights departing from two Houston airports in 2011\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nas_tibble creates a special tidyverse dataframe called a tibble\ntibbles have a number of features, but one of them is that they print more nicely in this type of tutorial environment\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse glimpse() to get a summary output of all the columns:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#dplyrfilter-keep-rows-matching-criteria",
    "href": "DSWksp2.html#dplyrfilter-keep-rows-matching-criteria",
    "title": "URISE Workshop: Data Wrangling",
    "section": "dplyr::filter: Keep rows matching criteria",
    "text": "dplyr::filter: Keep rows matching criteria\n\nBase R approach to filtering forces you to repeat the data frame’s name\ndplyr approach is simpler to write and read\nCommand structure (for all dplyr verbs):\n\nfirst argument is a data frame\nreturn value is a data frame\nnothing is modified in place\n\nNote: dplyr generally does not preserve row names\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can use the “|” for the OR condition:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also use the %in% operator to select for specific values in a column:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow you try.. How would we code it if we wanted to view all flights United Airlines or American Airlines flights that departed after 2PM?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#dplyrselect-pick-columns-by-name",
    "href": "DSWksp2.html#dplyrselect-pick-columns-by-name",
    "title": "URISE Workshop: Data Wrangling",
    "section": "dplyr::select: Pick columns by name",
    "text": "dplyr::select: Pick columns by name\n\nBase R approach is awkward to type and to read\ndplyr approach uses similar syntax to filter\nLike a SELECT in SQL\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can use the colon (:) to select multiple contiguous columns, and use ‘contains’ to match columns by name.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: we can also use ‘starts_with’, ‘ends_with’, and ‘matches’ (for regular expressions) to match columns by name.\nNow you try: Select all of the columns that contain information about the date and time of the flight, as well as those that contain information about the flight’s cancellation.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#chaining-or-pipelining",
    "href": "DSWksp2.html#chaining-or-pipelining",
    "title": "URISE Workshop: Data Wrangling",
    "section": "“Chaining” or “Pipelining”",
    "text": "“Chaining” or “Pipelining”\n\nUsual way to perform multiple operations in one line is by nesting\nCan write commands in a natural order by using the %&gt;% infix operator (which can be thought of as “and then”)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nChaining increases readability significantly when there are many commands\nOperator is automatically imported from the magrittr package\nCan be used to replace nesting in R commands outside of dplyr\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow you try: Using the chaining method select the columns indicating the flight carrier, flight number, and departure time, and filter so I see only United Airlines flights that left after 2PM.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#dplyrarrange-reorder-rows",
    "href": "DSWksp2.html#dplyrarrange-reorder-rows",
    "title": "URISE Workshop: Data Wrangling",
    "section": "dplyr::arrange: Reorder rows",
    "text": "dplyr::arrange: Reorder rows\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse desc() to display things in descending order:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow you try: Using piping select all American Airlines flights that left in the afternoon on January 1, and arrange them based on departure times.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#dplyrmutate-add-new-variables",
    "href": "DSWksp2.html#dplyrmutate-add-new-variables",
    "title": "URISE Workshop: Data Wrangling",
    "section": "dplyr::mutate: Add new variables",
    "text": "dplyr::mutate: Add new variables\n\nCreate new variables that are functions of existing variables\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the above code just printed our manipulations, but didn’t store them. To store them, we need to use the assignment arrow, as seen in the code chunk below:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow you try: Calculate the total delay of each flight based on the Departure delay and Arrival delay, and store the resulting value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#dplyrsummarise-reduce-variables-to-values",
    "href": "DSWksp2.html#dplyrsummarise-reduce-variables-to-values",
    "title": "URISE Workshop: Data Wrangling",
    "section": "dplyr::summarise: Reduce variables to values",
    "text": "dplyr::summarise: Reduce variables to values\n\nPrimarily useful with data that has been grouped by one or more variables\ngroup_by creates the groups that will be operated on\nsummarise uses the provided aggregation function to summarise each group\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow you try: Calculate the mean delay in arrival times for each month of the year.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nHelper function n() counts the number of rows in a group\nHelper function n_distinct(vector) counts the number of unique items in that vector\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nGrouping can sometimes be useful without summarising\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp2.html#resources",
    "href": "DSWksp2.html#resources",
    "title": "URISE Workshop: Data Wrangling",
    "section": "Resources",
    "text": "Resources\n\nOfficial dplyr reference manual and vignettes on CRAN: vignettes are well-written and cover many aspects of dplyr\nJuly 2014 webinar about dplyr (and ggvis) by Hadley Wickham and related slides/code: mostly conceptual, with a bit of code\ndplyr tutorial by Hadley Wickham at the useR! 2014 conference: excellent, in-depth tutorial with lots of example code (Dropbox link includes slides, code files, and data files)\ndplyr GitHub repo and list of releases"
  },
  {
    "objectID": "DSWksp1.html",
    "href": "DSWksp1.html",
    "title": "URISE Workshop: Data Visualization",
    "section": "",
    "text": "In this tutorial, we will introduce some reasons why data visualization is a critical aspect of data science and demonstrate the basics of creating effective data visualizations in R using ggplot2.\nMake sure to click “Run Code” in the interactive code chunks."
  },
  {
    "objectID": "DSWksp1.html#why-is-data-visualization-important",
    "href": "DSWksp1.html#why-is-data-visualization-important",
    "title": "URISE Workshop: Data Visualization",
    "section": "Why is data visualization important?",
    "text": "Why is data visualization important?\nWhen we consider the data science workflow (Fig. 1), there is not a step that explicitly says “data visualization”. This is because data visualization is so essential that it occurs throughout the entire process!\n\nFigure 1. Data science life cycle. (Drawn by Chanin Nantasenamat in collaboration with Ken Jee; Source Article)\nAt its core, data visualization is used to simplify complex data. Data scientists often work with very large data sets (think millions of rows) and it is exceedingly difficult to conceptualize those data when interacting with them in table form. Using data visualization techniques, data scientists are able to:\n\nidentify (sometimes unexpected) patterns and trends in data\nidentify errors or weirdnesses in data\nestablish expectations for relationships in data to inform understanding of analysis results\ncommunicate the results of their efforts to others\n\nYour first step is ALWAYS to visualize your data!"
  },
  {
    "objectID": "DSWksp1.html#data-visualization-in-r",
    "href": "DSWksp1.html#data-visualization-in-r",
    "title": "URISE Workshop: Data Visualization",
    "section": "Data visualization in R",
    "text": "Data visualization in R\nThere are a number of different tools that can aid in visualizing data in the R environment. Below is a selection of some of the tools available.\n\nggplot2: A powerful and flexible plotting package based on the grammar of graphics, allowing for the creation of complex multi-layered plots with consistent syntax.\nbase R: The default plotting system in R, offering simple and straightforward functions for plotting with basic customization options. (I often use base R plots for quick exploratory visualizations).\nplotly: An interactive graphing package that builds on ggplot2, allowing users to create dynamic, web-based interactive visualizations. For example, you can have a plot display a written value when hovering over a data point.\nshiny: A web application framework for R that allows users to create interactive web apps with reactive elements, including dynamic and responsive plots. This is a common tool for creating interactive data dashboards in R.\n\nYou are encouraged to explore these tools and others, but for the purposes of this lab, we will be focusing on ggplot2. You can find additional information on the ggplot2 package here."
  },
  {
    "objectID": "DSWksp1.html#our-data-set-james-linds-scurvy-study",
    "href": "DSWksp1.html#our-data-set-james-linds-scurvy-study",
    "title": "URISE Workshop: Data Visualization",
    "section": "Our data set: James Lind’s scurvy study",
    "text": "Our data set: James Lind’s scurvy study\nScurvy was a common affliction among sailors in the 1700s. James Lind’s scurvy data set includes information on the severity of symptoms of twelve scurvy patients after being treated with one of the following remedies: cider, dilute sulfuric acide, sea water, vinegar, citrus, and purgative mixture. These data are included in the medicaldata package in R and were originally published in James Lind’s A Treatise on the Scurvy in Three Parts in 1757.\n\nArrrr, Ye Got Scurvy Mate?\n \nRun the code chunk below to load the data and take a quick look at it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see the data includes information on the patient id (study_id), treatment, dosing regimen, severity of symptoms, and whether the sailors were fit for duty after treatment.\nHowever, looking at the data this way, we can’t really discern patterns that might exist. For example, which treatment seemed to reduce the severity of symptoms? Which treatment was associated with the lowest severity of gum rot overall?\nBy visualizing the data we can find answers to these questions and more!"
  },
  {
    "objectID": "DSWksp1.html#lets-visualize-some-data",
    "href": "DSWksp1.html#lets-visualize-some-data",
    "title": "URISE Workshop: Data Visualization",
    "section": "Let’s visualize some data!",
    "text": "Let’s visualize some data!\nIn this section we will demonstrate how to make a visualization using ggplot2.\nFor this first example, each line of code includes a comment (denoted by #) that describes what that line is doing. In general, it’s good practice to go line by line in code you receive to ensure you fully understand what it’s doing.\nIn the exercise code chunks, you will be required to fill in the missing code (denoted by #FILLMEIN) to create the visualization.\n\nDemonstration:\nWe are going to start by making a plot that will show us the number of patients associated with each level of symptom severity for gum rot colored by treatment type. Spend some time looking at the code and consider what you think the resulting plot will look like before running the chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDoes the resulting plot match what you expected the code to generate?\nEXERCISE 1:\nAdjust the code chunk below to create a plot that will show us the number of patients associated with each level of symptom severity for skin sores colored by treatment type.\n(HINT: You might want to refer back to your column names to ensure you are inputting the right variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nANALYSIS INTERLUDE:\nBased on your plots, were there more patients with sever gum rot or skin sores? Which treatment do you think is the best so far?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp1.html#asking-more-scurvy-questions",
    "href": "DSWksp1.html#asking-more-scurvy-questions",
    "title": "URISE Workshop: Data Visualization",
    "section": "Asking more scurvy questions",
    "text": "Asking more scurvy questions\nRun the code chunks in this section to see how visualizations can help us get answers to research questions related to the scurvy data set.\nResearch Question: Which symptom had the most severe cases?\nTo answer this question it will help us if our data is in long format. This will allow us to have a single column for symptom, rather than each symptom having it’s own column. Take a look at the output from the code chunk below and notice the changes to the data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see now all our symptom columns have been collapsed into a single column “symptom”. This also means that our study_id, treatment, and dosing_regimen_for_scurvy columns have repeated rows for each unique symptom value.\nHaving the data formatted this way makes it easier to make visualizations comparing symptoms.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBased on this figure, we can see that lassitude had the highest number of severe cases, followed by skin sores and weakness of the knees.\nEXERCISE 2:\nAdjust the code chunk below to create a plot that will show us which treatment type seemed to perform the best for reducing severity of scurvy symptoms.\n(HINT: You might want to refer back to your column names to ensure you are inputting the right variable names, and don’t forget about commas!)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhich treatment works best for treating scurvy?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "DSWksp1.html#adding-continuous-variables",
    "href": "DSWksp1.html#adding-continuous-variables",
    "title": "URISE Workshop: Data Visualization",
    "section": "Adding continuous variables",
    "text": "Adding continuous variables\nThe data set we have been working with thus far have consisted solely of categorical data (e.g. Severity (none, mile, moderate, severe). This means that we are limited to looking at the number of observations in each category, chiefly with bar plots. Numerical or continuous data consists of continuous number values and opens up new possibilities for data visualization.\nWe are going to use a made up data set to explore how we visualize continuous data. These data will consist of observations of incidences of scurvy among ship crews. They will include data on the weight, height, and age of each sailor, whether they contracted scurvy or not, which ship they sailed on, and the year the ship was active.\nRun the code chunk below to generate the new data set (don’t worry if you don’t follow what the code is doing, we just need the data).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow that we have the data you can take a quick look at it\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNotice that weight, height, and age are all numeric values. Also scurvy incidence is coded as N for no scurvy or Y for yes scurvy.\nResearch Question: How does the weight of sailors differ across ships?\nWe can use a box plot or violin plot to look for differences in a continuous variable (weight) across categorical variables (ship).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBoth of these plots show us that the Sea Serpent had the heaviest sailors.\n\nResearch Question: What is the relationship between height and weight?\nWe can use a scatterplot to look at the relationship of two continuous variables against each other.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUnsurprisingly, we see that weight generally increases with height.\nResearch Question: Does the relationship between height and weight differ across ships?\nWe can use color to show whether continuous relationships differ across a categorical variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt doesn’t look like there is much a difference in the trend between ships, but the Sea Serpent tends to have shorter sailors for a given weight value than the other ships."
  },
  {
    "objectID": "DSWksp1.html#final-exercise-your-turn",
    "href": "DSWksp1.html#final-exercise-your-turn",
    "title": "URISE Workshop: Data Visualization",
    "section": "FINAL EXERCISE: Your turn!",
    "text": "FINAL EXERCISE: Your turn!\nCreate three visualizations addressing the following research questions:\n\nDoes the incidence of scurvy seem to be related to height?\nDoes the incidence of scurvy seem to be related to age?\nWhich ship had the highest incidence of scurvy? Can you think of an explanation for your answer? (HINT: think of when James Lind’s publication was released)\n\nResearch Question: Does the incidence of scurvy seem to be related to height?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Does the incidence of scurvy seem to be related to age?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nResearch Question: Which ship had the highest incidence of scurvy? Can you think of an explanation for your answer? (HINT: think of when James Lind’s publication was released)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Course Description\nDATA SCIENCE I. Data Science I provides students with an introduction to the concepts and basic skills needed to understand the role of data in today’s world. The course explores the emergence of the field using the data science workflow as the unifying framework to illustrate the importance of each stage of the workflow, how it contributes to the final report, and how that new information is used. Topics include applications of data science; data ethics; data preparation; data stewardship; analysis, evaluation, communicating results, and best practices. The trade-offs among tools, algorithms, and visualizations are discussed using both effective and ineffective examples. This is a hands-on course, students work with datasets in a peer-peer and near-peer groups.\nPrerequisites: MAT 140 or MAT 143.\n\nContact\nKayla Blincow: kayla.israel@uvi.edu"
  },
  {
    "objectID": "Week5HW.html",
    "href": "Week5HW.html",
    "title": "Week 5: Data Visualization Part 3",
    "section": "",
    "text": "In this lab, we will cover best practices in data visualization and learn how to fine tune and modify basic visualizations in R using ggplot2\nA COUPLE IMPORTANT NOTES:\nThe code chunk below sets up our coding environment. You will see I use the library() function to call packages. Packages are add ons you can load into R that include specialized functions. For example, ggplot2 is a package with functions that give us a lot of flexibility in creating data visualizations.\nknitr::opts_chunk$set(echo = TRUE)\n\nlibrary(dplyr) #package with useful data manipulation functions\nlibrary(ggplot2) #package allowing us to make plots\nlibrary(palmerpenguins) #package containing our data\nFor this tutorial we will be working with the Palmer Penguins dataset again.As a reminder, this dataset includes morphometric information on three different species of penguins across three different islands in Antarctica monitored by the Palmer Station Long Term Ecological Research study area. These data were made available by Dr. Kristen Gorman and were originally published in:"
  },
  {
    "objectID": "Week5HW.html#meet-the-penguins",
    "href": "Week5HW.html#meet-the-penguins",
    "title": "Week 5: Data Visualization Part 3",
    "section": "Meet the penguins!",
    "text": "Meet the penguins!\n\nPalmer penguin species (artwork by @allison_horst).\n\nUse the code chunk below to load and take a quick look at our data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week5HW.html#not-all-data-visualizations-are-created-equal",
    "href": "Week5HW.html#not-all-data-visualizations-are-created-equal",
    "title": "Week 5: Data Visualization Part 3",
    "section": "Not all data visualizations are created equal",
    "text": "Not all data visualizations are created equal\nTake a look at Figures 1 and 2 below. Both were made using the same data from the Palmer Penguins dataset. Which visualization is easier to interpret? Why?\n\n\n\nFigure 1. Body mass of penguins recorded at the Palmer Research Station in Antarctica.\n\n\n\n\n\nFigure 2. Body mass of penguins recorded at the Palmer Research Station in Antarctica.\n\n\n\nAnalysis Interlude\nAnswer the following questions in the code chunk below, or directly in your homework template.\n\nWhat information can you gain from looking at each plot?\nWhich do you think is a better visualization? Why?\nIn Figure 2, if you had to classify the outlier of unknown sex from Biscoe Island as male or female,, which sex would you choose? Why?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week5HW.html#best-practices-in-data-visualization",
    "href": "Week5HW.html#best-practices-in-data-visualization",
    "title": "Week 5: Data Visualization Part 3",
    "section": "Best practices in data visualization",
    "text": "Best practices in data visualization\nIn this section we will go over some guidelines for creating effective visualizations from data.\n\nVisualizations should serve a purpose.\nYou should start your data visualization process by asking yourself, “what do I want people to take away from this visualization?” Tailor your visualization to achieving your specified purpose, and return to that question often during the process to ensure that you are meeting your original objective.\nFor example, in Figures 1 and 2, if our objective was to highlight the difference in body mass between male and female penguins from different islands, having the core visualization side by side for each island like in Figure 2 is much more effective than stacking them like in Figure 1.\nKnow your audience.\nRelated to understanding the purpose of your visualization, you should also understand the audience you are creating it for. Is it intended to be used by the public? Scientists? Corporate clients for your data science business? You would prioritize different elements for each of these audiences. It is important to take time to conciously identify your audience and evaluate the effectiveness of visualization for your target audience throughout the process.\nChoose the right visualization for the job.\nThere are a number of different visualization types, and which one you choose depends on what your goals are. There are online tools that can help you decide which chart type is the most effective for your goals. Here are a few examples:\n\nThe Data Visualisation Catalogue\nThe Data Viz Project\nfrom Data to Viz\n\nFigures 1 and 2 provide a good example of how choosing the right type of visualization can have a strong impact.\nSimplify and focus.\nMore often than not a simpler visualization will be better than a more complex one. You should evaluate your visualizations critically and remove any unnecessary elements to draw attention to those that are most important for achieving your purpose. Using predictable patterns for layouts and maintaining a common theme can help with this if you have multiple visualizations for one project.\nUse color effectively.\nBad color choices can ruin a visualization. Use colors to highlight important elements and maintain consistency. Avoid using excessively bright or clashing colors. This is also an important area for ensuring accessibility. Color blindness is a common enough condition that you should take it into consideration when selecting colors for your visualizations.\nProvide necessary context\nYour audience should be able to understand exactly what your visualization is showing, meaning you need to give them all the necessary information. This can come in the form of axis labels, legends, and sometimes a caption. You might also add elements to draw attention to the most important points, such as baselines or benchmarks."
  },
  {
    "objectID": "Week5HW.html#lets-visualize-some-data",
    "href": "Week5HW.html#lets-visualize-some-data",
    "title": "Week 5: Data Visualization Part 3",
    "section": "Let’s visualize some data!",
    "text": "Let’s visualize some data!\nIn this section we will work on improving visualizations using ggplot2.\nFor this first example, each line of code includes a comment (denoted by #) that describes what that line is doing. In general, it’s good practice to go line by line in code you receive to ensure you fully understand what it’s doing.\nIn the exercise code chunks, you will be required to fill in the missing code (denoted by #FILLMEIN) to create the visualization.\n\nDemonstration 1:\nWe are going to start by improving the plot we made in the first tutorial showing the relationship between flipper length and body mass by species by adjusting the color and style.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis isn’t a bad visualization, but we might want to relabel the axes and legend to make them more clear and aesthetically pleasing. We might also want to change the colors of the points and remove the gray from the plotting area to simplify things.\nIn the following code chunk, I have only included comments on the parts of the code that have changed from above.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExercise 1:\nAdjust the code chunk below to create a visualization that shows the same data as above but with a different style and color palette. Spend some time exploring the different built-in options ggplot2 has for controlling these elements.\nHINT: Check out ggplot2’s pre-loaded themes and try Googling “hex color picker” to find the codes for different colors.\nTAKE A SCREENSHOT OF THE CODE/RESULTING PLOT AND PUT IT IN YOUR HW DOCUMENT.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemonstration 2:\nIn the above visualization we were plotting two continuous or numerical variables, meaning the values of the variables are actual numbers, and one categorical variable, meaning the values of the variable are levels of a category.\nIt is common to use the axes to display continuous variables and color to depict a categorical variable, as we did in the figure above, but it depends on what your goals are. When you want to emphasize the comparison of a single continuous variable across levels of a category, the categorical variable might become one of the axes, similar to what was done in Figure 1 and Figure 2 at the beginning of this tutorial.\nIn this section we will explore visualizations that are good for categorical variables.\nRun the code chunk below to see an example of a visualization plotting a continuous variable (flipper_length_mm) against a categorical variable (sex) using a box plot.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExercise 2:\nAdjust the code chunk below to create a visualization that shows the same data as above but change the following elements:\n\ntype of plot (i.e. don’t do a box plot)\ncolor the plotted elements based on sex\nchange the axis labels and legend title\nset a different theme\n\nHINT: For inspiration on types of plots ggplot2 has available for plotting a categorical (aka discrete) variable against a continuous variable, check out the ggplot2 cheat sheet here.\nTAKE A SCREENSHOT OF THE CODE/RESULTING PLOT AND PUT IT IN YOUR HW DOCUMENT.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDemonstration 3:\nIn this section we will work on improving a visualization using the best practices listed above.\nOur goal is to create a visualization for the general public that shows the difference in penguin species composition across islands. Imagine the plot is going to be used on an informational plaque in an aquarium.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis visualization is not very effective for a number of reasons… First off we can’t actually see the points, because they are stacked on top of each other. Aesthetically, it is incredibly boring and wouldn’t entice aquarium visitors to come take a closer look. If our goal is to dispense information about the number of different penguin species across the different islands, we have not done a very good job.\nExercise 3:\nAdjust the code chunk below to improve the above visualization to better achieve our stated goal using the data visualization best practices as guidance.\nHINT: For inspiration on types of plots ggplot2 has available for plotting categorical (aka discrete) variables, check out the ggplot2 cheat sheet here. Consider the option that you might want to plot a single categorical variable and use “fill” or “color” to distinguish your second categorical variable.\nTAKE A SCREENSHOT OF THE CODE/RESULTING PLOT AND PUT IT IN YOUR HW DOCUMENT.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week5HW.html#final-exercise-your-turn",
    "href": "Week5HW.html#final-exercise-your-turn",
    "title": "Week 5: Data Visualization Part 3",
    "section": "FINAL EXERCISE: Your turn!",
    "text": "FINAL EXERCISE: Your turn!\nFor the final exercise you can create a visualization of your choosing, but you must explain how you addressed each of the data visualization best practices in your response. That means you must clearly define the purpose of your visual, who your audience is, and why you made the aesthetic decisions that you chose.\nTo receive full points, your figure must be accompanied by a written explanation for each best practice.\nTAKE A SCREENSHOT OF THE CODE/RESULTING PLOT AND PUT IT IN YOUR HW DOCUMENT.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week5HW.html#citations-and-helpful-links",
    "href": "Week5HW.html#citations-and-helpful-links",
    "title": "Week 5: Data Visualization Part 3",
    "section": "Citations and Helpful Links",
    "text": "Citations and Helpful Links\nThis lab was created by Dr. Kayla Blincow for the University of the Virgin Islands Data Science program using ideas, information, and inspiration from the following sources:\n\nPalmer Penguins\nTableau Data Viz Tips\nData Viz Best Practices\n\nQuestions about implementing this tutorial? Contact Kayla Blincow at kaylamblincow@gmail.com."
  },
  {
    "objectID": "Week1R4DS.html",
    "href": "Week1R4DS.html",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "In this course, you will not have to download R or RStudio, which are software tools used to implement the R coding language. Since our focus is not for you to become expert coders, but rather to expose you to the data science work flow, we are going to do all your coding in interactive tutorials like this one.\nFor this first experience, I just want you to get used to the format. This tutorial directly mirrors the R for Data Science textbook “Whole Game &gt; 2 Workflow:basics” chapter that you were assigned to read this week. As you’re reading, use this page to run the code that appears in the chapter.\nA couple vocabulary words:\n\ncode chunk: these are sections in your tutorials that contain code that is for you to view and investigate, but not necessarily run\nWebR code chunk: these are sections in your tutorials that contain an interactive code chunk that allows you to edit and run the code in the section\n\n\n\nThese are examples of code chunks:\n\n1/200 * 30\n\n[1] 0.15\n\n(59 + 73 + 2) / 3\n\n[1] 44.66667\n\nsin(pi / 2)\n\n[1] 1\n\n\nNotice the output of the code is printed below the chunk, and you are not able to edit the chunk.\nHere is an example of a WebR code chunk:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this type of code chunk, you can click in the chunk and edit what is written there. You might have noticed, nothing gets printed when you click “Run Code”. Try writing “x” on the next line and running the code to see what happens.\nLet’s try another example. In the code chunk below, add the code from the text that demonstrates basic arithmetic on vectors. Click “Run Code” and see if you get the same result.\nFYI: vectors are a type of data structure that holds elements of the same type–the primes object we create below is a vector of numeric values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry adding a comment in the WebR code chunk below and running it to see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCan you edit the names of the objects and add comments below to make the code more effective?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry exploring the sample() function in the WebR code chunk below.\nPro-tip: if you want to find out more about how to use a function you can type “?” in front of it to view the help information associated with it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTry the exercises from the text below. When you have completed them share a screenshot of your outputs for each question to get full points on your homework assignment for this week.\n\nWhy does this code not work?\nEdit the code so that it runs properly and provide a written response to the question as a comment in the WebR code chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTweak each of the following R commands so that they run correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe will skip this one since it’s specific to RStudio.\nLook at the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nWrite your response as a comment in the WebR code chunk.\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n  geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#coding-basics",
    "href": "Week1R4DS.html#coding-basics",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "These are examples of code chunks:\n\n1/200 * 30\n\n[1] 0.15\n\n(59 + 73 + 2) / 3\n\n[1] 44.66667\n\nsin(pi / 2)\n\n[1] 1\n\n\nNotice the output of the code is printed below the chunk, and you are not able to edit the chunk.\nHere is an example of a WebR code chunk:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this type of code chunk, you can click in the chunk and edit what is written there. You might have noticed, nothing gets printed when you click “Run Code”. Try writing “x” on the next line and running the code to see what happens.\nLet’s try another example. In the code chunk below, add the code from the text that demonstrates basic arithmetic on vectors. Click “Run Code” and see if you get the same result.\nFYI: vectors are a type of data structure that holds elements of the same type–the primes object we create below is a vector of numeric values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#comments",
    "href": "Week1R4DS.html#comments",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try adding a comment in the WebR code chunk below and running it to see what happens.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#whats-in-a-name",
    "href": "Week1R4DS.html#whats-in-a-name",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Can you edit the names of the objects and add comments below to make the code more effective?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#calling-functions",
    "href": "Week1R4DS.html#calling-functions",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try exploring the sample() function in the WebR code chunk below.\nPro-tip: if you want to find out more about how to use a function you can type “?” in front of it to view the help information associated with it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week1R4DS.html#exercises",
    "href": "Week1R4DS.html#exercises",
    "title": "Week 1 Homework: R4DS Exercises",
    "section": "",
    "text": "Try the exercises from the text below. When you have completed them share a screenshot of your outputs for each question to get full points on your homework assignment for this week.\n\nWhy does this code not work?\nEdit the code so that it runs properly and provide a written response to the question as a comment in the WebR code chunk.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTweak each of the following R commands so that they run correctly:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe will skip this one since it’s specific to RStudio.\nLook at the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\nWrite your response as a comment in the WebR code chunk.\n\nmy_bar_plot &lt;- ggplot(mpg, aes(x = class)) +\n  geom_bar()\nmy_scatter_plot &lt;- ggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\nggsave(filename = \"mpg-plot.png\", plot = my_bar_plot)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html",
    "href": "Week2HW.html",
    "title": "Week 2 Homework: Asking Questions",
    "section": "",
    "text": "To receive full points on this homework, please submit a document containing all of the requested screenshots on Brightspace. You should also make sure to run all the code chunks in this document for the tutorial to run properly."
  },
  {
    "objectID": "Week2HW.html#getting-started",
    "href": "Week2HW.html#getting-started",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Getting started",
    "text": "Getting started\nFirst things first, we load our data set and take a look at it. I am only going to show you some of the ways you can explore this data set, then provide you with a written summary. In reality, you would spend a lot of time taking a look at each column and familiarizing yourself with what the data entail.\nMAKE SURE TO RUN ALL CODE CHUNKS.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: the lubridate package (an R add-on) has this data set pre-loaded in it, which is why the above code works. We are using the assignment arrow “&lt;-” to create an object “lakers” that is the lubridate lakers data set.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: It’s a good idea to make note of what form the data takes in each column. In this case, all columns are character strings  or integers . This is important because we might not want them to take that form. For example, the “date” column is currently an integer, but if we were to work with it, we might want it to be recognized as an actual date. We will spend more time working on dealing with issues like this later in the semester.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: the “$” operator allows us to select a column within a dataframe. In the above code chunk, we used the unique() function on the etype column by typing lakers$etype. The line of code says look in the lakers dataframe for the etype column and give us a list of the unique values present in that column.\nWe see that our data includes game logs from the entire season with the following variables (variables we will be actively using in this tutorial are bolded):\n\ndate: Date of the game\nopponent: Three letter code for the opponent team the Lakers played against\ngame_type: Whether the game was home or away\ntime: The time on the game clock when the play was recorded (i.e. time left in the quarter)\nperiod: Quarter of the game (1, 2, 3, 4, 5), with 5 representing overtime\netype: Type of play recorded\nteam: The team that made the play\nplayer: The player that made the play\nresult: The result of the play - blank for non-shots, “missed” or “made” for shots\npoints: Number of points the play resulted in\ntype: Type of play - type of foul for fouls, type of shot for shots, type of rebound for rebounds\nx: The location along the x plane (court width) of the play (shots only)\ny: The location along the y plane (court length) of the play (shots only)"
  },
  {
    "objectID": "Week2HW.html#question-1-who-committed-the-most-turnovers",
    "href": "Week2HW.html#question-1-who-committed-the-most-turnovers",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 1: Who committed the most turnovers?",
    "text": "Question 1: Who committed the most turnovers?\nFor this first question, I will walk you through how to find the answer, showing you some important data wrangling tools along the way. We will spend A LOT more time exploring these tools in future weeks, so don’t worry too much if you don’t follow all the code.\n\nWhich players committed the most turnovers?\n\nTo answer this, we first need to do some data filtering. We are only interested in plays made by the Lakers, so we need to filter the data to only include “LAL” observations in the “team” column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above code chunk, I introduced a new coding operator, the pipe, denoted by “%&gt;%” or “|&gt;”. You can imagine this translating to “and then”. We are creating a new object called lakersQ1. To create this object we take the lakers data “and then” we filter it so that the “team” column only includes “LAL”. We use “==” when filtering (not a singular “=” sign). NOTE: we are using the dplyr package filter() function, not the base R filter() function.\nNow that we have done that, we need to determine which players committed the most turnovers by keeping only observations associated with turnovers. We can again accomplish this using filtering.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNOTE: when we use the assignment arrow (&lt;-) with the same object name as the one we made previously (“lakersQ1”), we are overwriting our original lakersQ1 object and creating a new one.\nNow we can create a visualization to see who committed the most turnovers. Again, we will be spending a lot more time working through how to make visualizations, so don’t worry too much about the code. Focus more on interpreting the output.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe see that Kobe Bryant, Pau Gasol, and Lamar Odom committed the most turnovers across the season. Assuming you know nothing about basketball, I will tell you that these are three of the biggest stars on this championship team. This means they probably got waayyyy more playing time than the other players, giving them more opportunity to commit a turnover in the first place. This is an important lesson for multiple reasons:\n\nYou should always evaluate your results to see if they make sense in the context of the bigger picture. Kobe Bryant is one of the greatest NBA players of all time and played with the Lakers his entire 20 year career. If we were using this as a metric for deciding who gets traded, we probably haven’t found a very good metric. But then again, even Kobe has room for improvement… 200 seems like a lot, and he could use this information to focus his efforts on reducing turnovers.\nSometimes folks you are working with think they want the answer to one question (who committed the most turnovers?), but what they really want is the answer to a different question (who committed the most turnovers accounting for how often they played?).\n\nWhat’s something we could do to make this a fairer picture of turnover rates?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#question-2-which-players-missed-the-most-free-throws",
    "href": "Week2HW.html#question-2-which-players-missed-the-most-free-throws",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 2: Which players missed the most free throws?",
    "text": "Question 2: Which players missed the most free throws?\nLet’s move on to the second question.\n\nWhich players missed the most free throws?\n\nFirst thing we have to do is again pull only data related to observations of plays commited by the Lakers (not their opponents).\nAdjust the following code chunk so that you create an object called “lakersQ2” that filters for only plays made by the Lakers. (HINT: Look back at how we tackled this task in the first question.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow we need to filter so we only have data associated with free throws.\nAdjust the following code to accomplish that task. (HINT: Look at how we filtered to only have observations of turnovers in the first question.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFinally, we also need to filter so we are only looking at missed free throws.\nAdjust the code chunk below to do the final filtering so we are looking at data on free throws missed by the Lakers.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the three code chunks above correctly, this following code chunk should generate a bar plot of the number of missed free throws for each player.\nClick “Run Code” and take a screenshot of the resulting plot and include it in your homework response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhich players missed the most free throws? Is there anything you would change about this question/analysis to get a fairer picture of free throw percentages?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "href": "Week2HW.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 3: Who performed highest against the best opposing teams?",
    "text": "Question 3: Who performed highest against the best opposing teams?\nMoving on to our final question!\n\nLast season, the Boston Celtics and the Cleveland Cavaliers had higher W/L percentages than the Lakers. Which players performed the best against these teams in terms of attempted shots? Rebounds? Assists?\n\nWe will again rely on filtering to find the answer.\nFirst, let’s filter so the data only include games played against the Celtics and the Cavs. I’ll do this one for you, just make sure to run the code chunk below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above chunk, I used the “|” operator. When filtering, this symbol, |, means “or”. In the second line of code we are saying we only want observations where the opponent column is “CLE” (for the Cavs) OR “BOS” (for the Celtics). We will learn more about these types of operators later in the semester.\nNow that we have only the games we are interested in, let’s filter so we only have observations of plays made by the Lakers. Fill out the code chunk below to accomplish that task.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s start with who had the most attempted shots?\nUse the code chunk below to filter for shots in the etype column. Call the new object lakersQ3_shots.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the code chunk above correctly, the following chunk should generate a plot telling you who took the most shots against the Celtics and Cavs last season.\nTake a screenshot of the resulting plot and include it in your HW response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow let’s do the same thing to see who had the most rebounds.\nUse the code chunk below to filter for rebounds in the etype column from the lakersQ3 object. Call the new object lakersQ3_rbs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAssuming you completed the code chunk above correctly, the following chunk should generate a plot telling you who got the most rebounds against the Celtics and Cavs last season.\nClick “Run Code” and take a screenshot of the resulting plot and include it in your HW response.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, can we accomplish the same task for assists?\nUse the code chunk below to filter for assists in the etype column.\n(HINT: you might want to take a look at the available options in the etype column using the unique() function, similar to what we did in the “Getting started” section.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Week2HW.html#concluding-remarks",
    "href": "Week2HW.html#concluding-remarks",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Concluding remarks",
    "text": "Concluding remarks\nObviously, I intentionally used simplified questions, as we are just starting to get our feet wet in terms of coding in R, but these types of analyses actually go on behind the scenes for most sports teams.\nThere are much more complicated questions we could ask and analyses we could perform with these data as well. We stuck with questions directly related to the variables present, but we can also take these data another step using data manipulation and analysis tools. Even though the active court lineup is not provided, we could deduce which players were on the court at certain times and ask something like which lineup led to the most points scored? Or which lineup led to the most missed shots by the other team? We could also try predicting outcomes using these data. What is the probability of the Lakers winning a game given the number of minutes Kobe Bryant plays in the first half? How about given the number of consecutive away games they’ve played?\nWhat is another more complex question you could answer using these data?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs we move through this semester, we will try to build your coding skills so that you can start trying to address these types of more complex data science questions on your own. We might even revisit this data set later in the semester to see if we can implement the tools you’ve learned to ask more complex questions."
  },
  {
    "objectID": "Week2HW_VA.html",
    "href": "Week2HW_VA.html",
    "title": "Week 2 Homework: Asking Questions",
    "section": "",
    "text": "To receive full points on this homework, please submit a document with answers to all question on Brightspace or via email."
  },
  {
    "objectID": "Week2HW_VA.html#getting-started",
    "href": "Week2HW_VA.html#getting-started",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Getting started",
    "text": "Getting started\nFirst things first, we load our data set and take a look at it. This initial step of exploring that data is crucial. Data scientists spend a lot of time familiarizing themselves with what the data entail so they can know what questions they are able to answer, and if they need to go searching for additional information.\nIn the code chunk below, we load our Lakers data set.\n\n#create an object \"lakers\" that includes our data set\nlakers &lt;- lubridate::lakers \n\nNOTE: the lubridate package (an R add-on) has this data set pre-loaded in it, which is why the above code works. We are using the assignment arrow “&lt;-” to create an object “lakers” that is the lubridate lakers data set.\nOnce we have the data set loaded, we can take a quick look at it using the glimpse() function. The code chunk below runs that function.\n\n#the glimpse function allows us to take a quick look at the data/data structure\nglimpse(lakers)\n\nRows: 34,624\nColumns: 13\n$ date      &lt;int&gt; 20081028, 20081028, 20081028, 20081028, 20081028, 20081028, …\n$ opponent  &lt;chr&gt; \"POR\", \"POR\", \"POR\", \"POR\", \"POR\", \"POR\", \"POR\", \"POR\", \"POR…\n$ game_type &lt;chr&gt; \"home\", \"home\", \"home\", \"home\", \"home\", \"home\", \"home\", \"hom…\n$ time      &lt;chr&gt; \"12:00\", \"11:39\", \"11:37\", \"11:25\", \"11:23\", \"11:22\", \"11:22…\n$ period    &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ etype     &lt;chr&gt; \"jump ball\", \"shot\", \"rebound\", \"shot\", \"rebound\", \"shot\", \"…\n$ team      &lt;chr&gt; \"OFF\", \"LAL\", \"LAL\", \"LAL\", \"LAL\", \"LAL\", \"POR\", \"LAL\", \"LAL…\n$ player    &lt;chr&gt; \"\", \"Pau Gasol\", \"Vladimir Radmanovic\", \"Derek Fisher\", \"Pau…\n$ result    &lt;chr&gt; \"\", \"missed\", \"\", \"missed\", \"\", \"made\", \"\", \"made\", \"\", \"mad…\n$ points    &lt;int&gt; 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, …\n$ type      &lt;chr&gt; \"\", \"hook\", \"off\", \"layup\", \"off\", \"hook\", \"shooting\", \"\", \"…\n$ x         &lt;int&gt; NA, 23, NA, 25, NA, 25, NA, NA, NA, 36, 30, 34, NA, 15, 46, …\n$ y         &lt;int&gt; NA, 13, NA, 6, NA, 10, NA, NA, NA, 21, 21, 10, NA, 17, 9, 10…\n\n\nNOTE: It’s a good idea to make note of what form the data takes in each column. In this case, all columns are character strings  or integers . This is important because we might not want them to take that form. For example, the “date” column is currently an integer, but if we were to work with it, we might want it to be recognized as an actual date. We will spend more time working on dealing with issues like this later in the semester.\nThe next code chunk demonstrates how to use the head() function to learn print the first six rows the data.\n\n#the head function prints the first six rows of the data\nhead(lakers)\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF                    \n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n4 20081028      POR      home 11:25      1      shot  LAL        Derek Fisher\n5 20081028      POR      home 11:23      1   rebound  LAL           Pau Gasol\n6 20081028      POR      home 11:22      1      shot  LAL           Pau Gasol\n  result points  type  x  y\n1             0       NA NA\n2 missed      0  hook 23 13\n3             0   off NA NA\n4 missed      0 layup 25  6\n5             0   off NA NA\n6   made      2  hook 25 10\n\n\nBy exploring the data, we see that it includes game logs from the entire season with the following variables (variables we will be actively using in this tutorial are bolded):\n\ndate: Date of the game\nopponent: Three letter code for the opponent team the Lakers played against\ngame_type: Whether the game was home or away\ntime: The time on the game clock when the play was recorded (i.e. time left in the quarter)\nperiod: Quarter of the game (1, 2, 3, 4, 5), with 5 representing overtime\netype: Type of play recorded\nteam: The team that made the play\nplayer: The player that made the play\nresult: The result of the play - blank for non-shots, “missed” or “made” for shots\npoints: Number of points the play resulted in\ntype: Type of play - type of foul for fouls, type of shot for shots, type of rebound for rebounds\nx: The location along the x plane (court width) of the play (shots only)\ny: The location along the y plane (court length) of the play (shots only)\n\nThis next code chunk will use the unique() function to print the unique type of plays that are recorded in the data set. NOTE: the “$” operator allows us to select a column within a dataframe. In the above code chunk, we used the unique() function on the etype column by typing lakers$etype. The line of code says look in the lakers dataframe for the etype column and give us a list of the unique values present in that column.\n\n#we can look at the unique values for specific columns using the unique function and the $ operator\nunique(lakers$etype) #the type of plays recorded\n\n [1] \"jump ball\"  \"shot\"       \"rebound\"    \"foul\"       \"free throw\"\n [6] \"turnover\"   \"timeout\"    \"sub\"        \"violation\"  \"ejection\"  \n\n\nThe types of plays that are recorded are: jump balls, shots, rebounds, fouls, free throws, turnovers, timeouts, substitutions, violations, and ejections."
  },
  {
    "objectID": "Week2HW_VA.html#question-1-who-committed-the-most-turnovers",
    "href": "Week2HW_VA.html#question-1-who-committed-the-most-turnovers",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 1: Who committed the most turnovers?",
    "text": "Question 1: Who committed the most turnovers?\nFor this first question, I will walk you through how to find the answer, showing you some important data wrangling tools along the way. We will spend A LOT more time exploring these tools in future weeks.\n\nWhich players committed the most turnovers?\n\nTo answer this, we first need to do some data filtering. We are only interested in plays made by the Lakers, so we need to filter the data to only include “LAL” observations in the “team” column. “LAL” is the three letter code for the Lakers.\nIn the code chunk below, we do this filtering process. In this chunk, I will introduce a new coding operator, the pipe, denoted by “%&gt;%” or “|&gt;”. You can imagine this translating to “and then”. We are creating a new object called lakersQ1. To create this object we take the lakers data “and then” we filter it so that the “team” column only includes “LAL”. We use “==” when filtering (not a singular “=” sign).\n\n#filter the data so we only have plays made by the Lakers\nlakersQ1 &lt;- lakers %&gt;%  \n  filter(team == \"LAL\") \n\nUsing the unique() function we can check to make sure that our filtering was successful by seeing if the team column now only has one unique value: “LAL”. The code chunk below does that.\n\n#check to see if the filtering worked using the unique function on the column of interest\nunique(lakersQ1$team) #should only print \"LAL\"\n\n[1] \"LAL\"\n\n\nNow that we have only plays made by the Lakers, we need to determine which players committed the most turnovers by keeping only observations associated with turnovers. We can again accomplish this using filtering. The code chunk below performs that filtering process.\n\n#only pull data related to turnovers\nlakersQ1 &lt;- lakersQ1 %&gt;% \n  filter(etype == \"turnover\") \n\nNOTE: when we use the assignment arrow (&lt;-) with the same object name as the one we made previously (“lakersQ1”), we are overwriting our original lakersQ1 object and creating a new one.\nNow we can create a visualization to see who committed the most turnovers. The code chunk below prints a bar plot showing the count of turnovers on the y axis and player on the x axis.\n\nggplot(lakersQ1, aes(x = player)) + #create a plot with player as the x axis\n  geom_bar() + #plot a bar plot\n  theme_bw() + #add a theme\n  labs(x = \"Player\", y = \"Turnover Count\") + #change the axis labels\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #adjust the x axis labels so we can read the player names\n\n\n\n\n\n\n\n\nWe see that Kobe Bryant, Pau Gasol, and Lamar Odom committed the most turnovers across the season. Assuming you know nothing about basketball, I will tell you that these are three of the biggest stars on this championship team. This means they probably got way more playing time than the other players, giving them more opportunity to commit a turnover in the first place. This is an important lesson for multiple reasons:\n\nYou should always evaluate your results to see if they make sense in the context of the bigger picture. Kobe Bryant is one of the greatest NBA players of all time and played with the Lakers his entire 20 year career. If we were using this as a metric for deciding who gets traded, we probably haven’t found a very good metric. But then again, even Kobe has room for improvement… 200 seems like a lot, and he could use this information to focus his efforts on reducing turnovers.\nSometimes folks you are working with think they want the answer to one question (who committed the most turnovers?), but what they really want is the answer to a different question (who committed the most turnovers accounting for how often they played?).\n\nWhat’s something we could do to make this a fairer picture of turnover rates?\nWrite your answer in your homework submission document."
  },
  {
    "objectID": "Week2HW_VA.html#question-2-which-players-missed-the-most-free-throws",
    "href": "Week2HW_VA.html#question-2-which-players-missed-the-most-free-throws",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 2: Which players missed the most free throws?",
    "text": "Question 2: Which players missed the most free throws?\nLet’s move on to the second question.\n\nWhich players missed the most free throws?\n\nFirst thing we have to do is again pull only data related to observations of plays committed by the Lakers, not their opponents.\nThe following code chunk creates an object called “lakersQ2” that filters for only plays made by the Lakers.\n\n#filter so we only have observations of Laker plays\nlakersQ2 &lt;- lakers %&gt;% \n  filter(team == \"LAL\")\n\nNow we need to filter so we only have data associated with free throws.\nThe following code to accomplishes that task.\n\n#filter so we only have observations of free throws\nlakersQ2 &lt;- lakersQ2 %&gt;% \n  filter(etype == \"free throw\") \n\nFinally, we also need to filter so we are only looking at missed free throws.\nThe code chunk below does the final filtering so we are looking at data on free throws missed by the Lakers.\n\n#filter so we only have observations of MISSED free throws\nlakersQ2 &lt;- lakersQ2 %&gt;%\n  filter(result == \"missed\")\n\nThe following code chunk should generates a bar plot of the number of missed free throws for each player.\n\n#TAKE A SCREEN SHOT OF THIS PLOT AND INLCUDE IT IN YOUR HW SUBMISSION\nggplot(lakersQ2, aes(x = player)) + #create a ggplot with the lakersQ2 data with player as the x axis\n  geom_bar() + #plot a bar plot\n  theme_bw() + #add a theme\n  labs(x = \"Player\", y = \"Missed Free Throw Count\") + #change the x and y axis labels\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #adjust the x axis labels so we can read the player names\n\n\n\n\n\n\n\n\nWhich players missed the most free throws? Is there anything you would change about this question/analysis to get a fairer picture of free throw percentages?\nWrite your answer in your homework submission document."
  },
  {
    "objectID": "Week2HW_VA.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "href": "Week2HW_VA.html#question-3-who-performed-highest-against-the-best-opposing-teams",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Question 3: Who performed highest against the best opposing teams?",
    "text": "Question 3: Who performed highest against the best opposing teams?\nMoving on to our final question!\n\nLast season, the Boston Celtics and the Cleveland Cavaliers won more games than the Lakers. Which players performed the best against these teams in terms of attempted shots? Rebounds? Assists?\n\nWe will again rely on filtering to find the answer.\nFirst, let’s filter so the data only include games played against the Celtics and the Cavs. The code chunk below accomplishes this task. In the code below, I used the “|” operator. When filtering, this symbol, |, means “or”. In the second line of code we are saying we only want observations where the opponent column is “CLE” (for the Cavs) OR “BOS” (for the Celtics). We will learn more about these types of operators later in the semester.\n\n#filter so we only have games against the Cavs or Celtics\nlakersQ3 &lt;- lakers %&gt;% \n  filter(opponent == \"CLE\" | opponent == \"BOS\") \n\nNow that we have only the games we are interested in, let’s filter so we only have observations of plays made by the Lakers. The code chunk below accomplishes this task.\n\n#filter so we only have plays made by the Lakers\nlakersQ3 &lt;- lakersQ3 %&gt;% \n  filter(team == \"LAL\") \n\nLet’s start with who had the most attempted shots?\nThe code chunk below filters for shots in the etype column, creating a new object lakersQ3_shots.\n\nlakersQ3_shots &lt;- lakersQ3 %&gt;% \n  filter(etype == \"shot\")\n\nThe following code chunk should generate a plot telling you who took the most shots against the Celtics and Cavs last season.\n\n#TAKE A SCREEN SHOT OF THIS PLOT AND INLCUDE IT IN YOUR HW SUBMISSION\nggplot(lakersQ3_shots, aes(x = player)) +\n  geom_bar() + #plot a bar plot\n  theme_bw() + #add a theme\n  labs(x = \"Player\", y = \"Shot Count\") + #change the x and y axis labels\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #adjust the x axis labels so we can read the player names\n\n\n\n\n\n\n\n\nWho took the most shots against the Celtics and Cavaliers last season?\nWrite your answer in your homework submission document.\nNow let’s do the same thing to see who had the most rebounds.\nThe code chunk below filters for rebounds in the etype column from the lakersQ3 object, creating a new object called lakersQ3_rbs.\n\nlakersQ3_rbs &lt;- lakersQ3 %&gt;% \n  filter(etype == \"rebound\")\n\nThe following chunk should generate a plot telling you who got the most rebounds against the Celtics and Cavaliers last season.\n\n#TAKE A SCREEN SHOT OF THIS PLOT AND INLCUDE IT IN YOUR HW SUBMISSION \nggplot(lakersQ3_rbs, aes(x = player)) + \n  geom_bar() + #plot a bar plot   \n  theme_bw() + #add a theme   \n  labs(x = \"Player\", y = \"Rebound Count\") + #change the x and y axis labels   \n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #adjust the x axis labels so we can read the player names \n\n\n\n\n\n\n\n\nWho had the most rebounds against the Celtics and Cavaliers last season?\nWrite your answer in your homework submission document.\nNow, can we accomplish the same task for assists?\nThe following code chunk will print the unique values that exist in the etype column, which is the type of play.\n\nunique(lakers$etype)\n\n [1] \"jump ball\"  \"shot\"       \"rebound\"    \"foul\"       \"free throw\"\n [6] \"turnover\"   \"timeout\"    \"sub\"        \"violation\"  \"ejection\"  \n\n\nAre we able to answer the question who had the most assists against the Celtics and Cavaliers last season?\nWrite your answer in your homework submission document."
  },
  {
    "objectID": "Week2HW_VA.html#concluding-remarks",
    "href": "Week2HW_VA.html#concluding-remarks",
    "title": "Week 2 Homework: Asking Questions",
    "section": "Concluding remarks",
    "text": "Concluding remarks\nObviously, I intentionally used simplified questions, as we are just starting to get our feet wet in terms of coding in R, but these types of analyses actually go on behind the scenes for most sports teams.\nThere are much more complicated questions we could ask and analyses we could perform with these data as well. We stuck with questions directly related to the variables present, but we can also take these data another step using data manipulation and analysis tools. Even though the active court lineup is not provided, we could deduce which players were on the court at certain times and ask something like which lineup led to the most points scored? Or which lineup led to the most missed shots by the other team? We could also try predicting outcomes using these data. What is the probability of the Lakers winning a game given the number of minutes Kobe Bryant plays in the first half? How about given the number of consecutive away games they’ve played?\nWhat is another more complex question you could answer using these data?\nWrite your answer in your homework submission document.\n\nAs we move through this semester, we will try to build your coding skills so that you can start trying to address these types of more complex data science questions on your own. We might even revisit this data set later in the semester to see if we can implement the tools you’ve learned to ask more complex questions."
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  }
]